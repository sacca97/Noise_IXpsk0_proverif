File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IXpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IXpsk0.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 268, character 6:
Warning: identifier e rebound.
File "IXpsk0.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ne rebound.
File "IXpsk0.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 272, character 6:
Warning: identifier s rebound.
File "IXpsk0.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 273, characters 26-27:
Warning: identifier ns rebound.
File "IXpsk0.noise.passive.pv", line 274, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 274, characters 26-35:
Warning: identifier ciphertext rebound.
File "IXpsk0.noise.passive.pv", line 275, characters 6-7:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 282, character 6:
Warning: identifier e rebound.
File "IXpsk0.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ne rebound.
File "IXpsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 288, character 6:
Warning: identifier s rebound.
File "IXpsk0.noise.passive.pv", line 289, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 289, characters 26-27:
Warning: identifier ns rebound.
File "IXpsk0.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 291, characters 26-35:
Warning: identifier ciphertext rebound.
File "IXpsk0.noise.passive.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 300, characters 26-35:
Warning: identifier ciphertext rebound.
File "IXpsk0.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 308, characters 26-35:
Warning: identifier ciphertext rebound.
File "IXpsk0.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 318, characters 6-7:
Warning: identifier re rebound.
File "IXpsk0.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 321, characters 26-27:
Warning: identifier ne rebound.
File "IXpsk0.noise.passive.pv", line 321, characters 40-45:
Warning: identifier valid1 rebound.
File "IXpsk0.noise.passive.pv", line 322, characters 6-7:
Warning: identifier rs rebound.
File "IXpsk0.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 325, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 333, characters 6-7:
Warning: identifier re rebound.
File "IXpsk0.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 338, characters 26-27:
Warning: identifier ne rebound.
File "IXpsk0.noise.passive.pv", line 338, characters 40-45:
Warning: identifier valid1 rebound.
File "IXpsk0.noise.passive.pv", line 339, characters 6-7:
Warning: identifier rs rebound.
File "IXpsk0.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 522, characters 8-9:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 300, characters 26-35:
Warning: identifier ciphertext rebound.
File "IXpsk0.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 333, characters 6-7:
Warning: identifier re rebound.
File "IXpsk0.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 338, characters 26-27:
Warning: identifier ne rebound.
File "IXpsk0.noise.passive.pv", line 338, characters 40-45:
Warning: identifier valid1 rebound.
File "IXpsk0.noise.passive.pv", line 339, characters 6-7:
Warning: identifier rs rebound.
File "IXpsk0.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 268, character 6:
Warning: identifier e rebound.
File "IXpsk0.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ne rebound.
File "IXpsk0.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 272, character 6:
Warning: identifier s rebound.
File "IXpsk0.noise.passive.pv", line 273, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 273, characters 26-27:
Warning: identifier ns rebound.
File "IXpsk0.noise.passive.pv", line 274, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 274, characters 26-35:
Warning: identifier ciphertext rebound.
File "IXpsk0.noise.passive.pv", line 275, characters 6-7:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IXpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 574, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 308, characters 26-35:
Warning: identifier ciphertext rebound.
File "IXpsk0.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 566, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 282, character 6:
Warning: identifier e rebound.
File "IXpsk0.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ne rebound.
File "IXpsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 288, character 6:
Warning: identifier s rebound.
File "IXpsk0.noise.passive.pv", line 289, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 289, characters 26-27:
Warning: identifier ns rebound.
File "IXpsk0.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 291, characters 26-35:
Warning: identifier ciphertext rebound.
File "IXpsk0.noise.passive.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 318, characters 6-7:
Warning: identifier re rebound.
File "IXpsk0.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 321, characters 26-27:
Warning: identifier ne rebound.
File "IXpsk0.noise.passive.pv", line 321, characters 40-45:
Warning: identifier valid1 rebound.
File "IXpsk0.noise.passive.pv", line 322, characters 6-7:
Warning: identifier rs rebound.
File "IXpsk0.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "IXpsk0.noise.passive.pv", line 325, characters 7-8:
Warning: identifier hs rebound.
File "IXpsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier ck rebound.
File "IXpsk0.noise.passive.pv", line 228, characters 7-8:
Warning: identifier cs rebound.
File "IXpsk0.noise.passive.pv", line 228, character 36:
Warning: identifier h rebound.
File "IXpsk0.noise.passive.pv", line 218, characters 7-8:
Warning: identifier ck rebound.
Linear part:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Completing equations...
Completed equations:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Convergent part:
Completing equations...
Completed equations:
Process 0 (that is, the initial process):
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s));
    (
        {6}let e: keypair = keypairpack(empty,empty) in
        {7}let rs: key = empty in
        {8}let re: key = empty in
        {9}let v: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_1: key = catch-fail(v) in
        {11}let v_2: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_3: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v) then (if not-caught-fail(v_1) then (if not-caught-fail(v_2) then symmetricstatepack(v_2,v_1,v) else fail-any) else fail-any) else fail-any))) in
        {13}let v_4: symmetricstate = catch-fail((if success?((if not-caught-fail(v) then (if not-caught-fail(v_1) then (if not-caught-fail(v_2) then symmetricstatepack(v_2,v_1,v) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_3) && success?(is-true(success?(1-proj-3-tuple(v_3))))) then symmetricstatepack(1-proj-3-tuple(v_3),2-proj-3-tuple(v_3),hash(3-proj-3-tuple(v_3),empty)) else fail-any) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_4) then handshakestatepack(v_4,s,e,rs,re,key_psk(alice,bob),true) else fail-any) in
        {15}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {63}get statestore(=alice,=bob,=sid,statepack_a(hs_1: handshakestate)) in
        {16}let v_5: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {17}let v_6: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_7: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_5))) in
        {19}let v_8: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_7),6-proj-7-tuple(v_5))) in
        {20}let v_9: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_7),6-proj-7-tuple(v_5))) in
        {21}let v_10: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_7),6-proj-7-tuple(v_5))) in
        {22}let v_11: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_5)) && success?(2-proj-3-tuple(v_7))) then (if not-caught-fail(v_8) then (if not-caught-fail(v_9) then (if not-caught-fail(v_10) then (v_8,v_9,v_10) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {23}let v_12: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_7),1-proj-3-tuple(v_11),3-proj-3-tuple(v_7)))) in
        {24}let v_13: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_11)) && success?(symmetricstatepack(1-proj-3-tuple(v_7),1-proj-3-tuple(v_11),3-proj-3-tuple(v_7)))) then (if (not-caught-fail(v_12) && success?(is-true(success?(1-proj-3-tuple(v_12))))) then symmetricstatepack(1-proj-3-tuple(v_12),2-proj-3-tuple(v_12),hash(3-proj-3-tuple(v_12),2-proj-3-tuple(v_11))) else fail-any) else fail-any))) in
        {25}let v_14: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_5)) && success?(1-proj-7-tuple(v_5))) then (if (not-caught-fail(v_7) && success?(is-true(success?(1-proj-3-tuple(v_7))))) then (if (not-caught-fail(v_11) && success?(is-true(success?(1-proj-3-tuple(v_11))))) then (if (not-caught-fail(v_13) && success?(is-true(success?(1-proj-3-tuple(v_13))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_11)) then cipherstatepack(3-proj-3-tuple(v_11),minnonce) else fail-any),1-proj-3-tuple(v_11),3-proj-3-tuple(v_13)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {26}let v_15: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {27}let v_16: keypair = catch-fail((if not-caught-fail(v_15) then keypairpack(validkey(v_15),key_e(alice,bob,sid)) else fail-any)) in
        {28}let v_17: bitstring = catch-fail(getpublickey(v_16)) in
        {29}let v_18: bitstring = catch-fail(symmetricstateunpack(v_14)) in
        {30}let v_19: symmetricstate = catch-fail((if (not-caught-fail(v_18) && success?(is-true(success?(1-proj-3-tuple(v_18))))) then symmetricstatepack(1-proj-3-tuple(v_18),2-proj-3-tuple(v_18),hash(3-proj-3-tuple(v_18),v_17)) else fail-any)) in
        {31}let v_20: bitstring = catch-fail(symmetricstateunpack(v_19)) in
        {32}let v_21: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_20),getpublickey(v_16))) in
        {33}let v_22: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_20),getpublickey(v_16))) in
        {34}let v_23: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_20),getpublickey(v_16))) in
        {35}let v_24: bitstring = catch-fail((if (success?(getpublickey(v_16)) && success?(2-proj-3-tuple(v_20))) then (if not-caught-fail(v_21) then (if not-caught-fail(v_22) then (if not-caught-fail(v_23) then (v_21,v_22,v_23) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {36}let v_25: symmetricstate = catch-fail((if success?(getpublickey(v_16)) then (if (not-caught-fail(v_20) && success?(is-true(success?(1-proj-3-tuple(v_20))))) then (if (not-caught-fail(v_24) && success?(is-true(success?(1-proj-3-tuple(v_24))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_24)) then cipherstatepack(2-proj-3-tuple(v_24),minnonce) else fail-any),1-proj-3-tuple(v_24),3-proj-3-tuple(v_20)) else fail-any) else fail-any) else fail-any)) in
        {37}let v_26: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {38}let v_27: keypair = catch-fail((if not-caught-fail(v_26) then keypairpack(validkey(v_26),key_s(alice)) else fail-any)) in
        {39}let v_28: bitstring = catch-fail(symmetricstateunpack(v_25)) in
        {40}let v_29: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_28))) in
        {41}let v_30: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_29),2-proj-2-tuple(v_29),3-proj-3-tuple(v_28),getpublickey(v_27))) in
        {42}let v_31: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_28))) in
        {43}let v_32: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_29))) && success?(1-proj-3-tuple(v_28))) then (if (not-caught-fail(v_31) && success?(is-true(success?(1-proj-2-tuple(v_31))))) then cipherstatepack(1-proj-2-tuple(v_31),increment_nonce(2-proj-2-tuple(v_29))) else fail-any) else fail-any)) in
        {44}let v_33: bitstring = catch-fail((if (success?(getpublickey(v_27)) && (success?(3-proj-3-tuple(v_28)) && success?(1-proj-3-tuple(v_28)))) then (if (not-caught-fail(v_29) && success?(is-true(success?(1-proj-2-tuple(v_29))))) then (if not-caught-fail(v_30) then (if not-caught-fail(v_32) then (v_32,v_30) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {45}let v_34: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_33),2-proj-3-tuple(v_28),3-proj-3-tuple(v_28)))) in
        {46}let v_35: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_33)) && success?(symmetricstatepack(1-proj-2-tuple(v_33),2-proj-3-tuple(v_28),3-proj-3-tuple(v_28)))) then (if (not-caught-fail(v_34) && success?(is-true(success?(1-proj-3-tuple(v_34))))) then symmetricstatepack(1-proj-3-tuple(v_34),2-proj-3-tuple(v_34),hash(3-proj-3-tuple(v_34),2-proj-2-tuple(v_33))) else fail-any) else fail-any)) in
        {47}let v_36: bitstring = catch-fail((if success?(getpublickey(v_27)) then (if (not-caught-fail(v_28) && success?(is-true(success?(1-proj-3-tuple(v_28))))) then (if (not-caught-fail(v_33) && success?(is-true(success?(1-proj-2-tuple(v_33))))) then (if not-caught-fail(v_35) then (v_35,2-proj-2-tuple(v_33)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {48}let v_37: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_36))) in
        {49}let v_38: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_37))) in
        {50}let v_39: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_38),2-proj-2-tuple(v_38),3-proj-3-tuple(v_37),msg_a(alice,bob,sid))) in
        {51}let v_40: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_37))) in
        {52}let v_41: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_38))) && success?(1-proj-3-tuple(v_37))) then (if (not-caught-fail(v_40) && success?(is-true(success?(1-proj-2-tuple(v_40))))) then cipherstatepack(1-proj-2-tuple(v_40),increment_nonce(2-proj-2-tuple(v_38))) else fail-any) else fail-any)) in
        {53}let v_42: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_37)) && success?(1-proj-3-tuple(v_37))) then (if (not-caught-fail(v_38) && success?(is-true(success?(1-proj-2-tuple(v_38))))) then (if not-caught-fail(v_39) then (if not-caught-fail(v_41) then (v_41,v_39) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {54}let v_43: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_42),2-proj-3-tuple(v_37),3-proj-3-tuple(v_37)))) in
        {55}let v_44: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_42)) && success?(symmetricstatepack(1-proj-2-tuple(v_42),2-proj-3-tuple(v_37),3-proj-3-tuple(v_37)))) then (if (not-caught-fail(v_43) && success?(is-true(success?(1-proj-3-tuple(v_43))))) then symmetricstatepack(1-proj-3-tuple(v_43),2-proj-3-tuple(v_43),hash(3-proj-3-tuple(v_43),2-proj-2-tuple(v_42))) else fail-any) else fail-any)) in
        {56}let v_45: bitstring = catch-fail((if success?(1-proj-2-tuple(v_36)) then (if (not-caught-fail(v_37) && success?(is-true(success?(1-proj-3-tuple(v_37))))) then (if (not-caught-fail(v_42) && success?(is-true(success?(1-proj-2-tuple(v_42))))) then (if not-caught-fail(v_44) then (v_44,2-proj-2-tuple(v_42)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {57}let v_46: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_45),v_27,v_16,4-proj-7-tuple(v_5),5-proj-7-tuple(v_5),6-proj-7-tuple(v_5),7-proj-7-tuple(v_5))) in
        {58}let v_47: bitstring = catch-fail(concat3(v_17,2-proj-2-tuple(v_36),2-proj-2-tuple(v_45))) in
        {59}let (hs_2: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_5) && success?(is-true(success?(1-proj-7-tuple(v_5))))) then (if (not-caught-fail(v_6) && success?(is-true(success?(1-proj-3-tuple(v_6))))) then (if not-caught-fail(v_14) then (if not-caught-fail(v_16) then (if not-caught-fail(v_17) then (if not-caught-fail(v_19) then (if not-caught-fail(v_25) then (if not-caught-fail(v_27) then (if (not-caught-fail(v_36) && success?(is-true(success?(1-proj-2-tuple(v_36))))) then (if (not-caught-fail(v_45) && success?(is-true(success?(1-proj-2-tuple(v_45))))) then (if not-caught-fail(v_46) then (if not-caught-fail(v_47) then (v_46,v_47) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {60}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {61}insert statestore(alice,bob,sid,statepack_b(hs_2));
        {62}out(pub, message_a)
    ) | (
        {132}get statestore(=alice,=bob,=sid,statepack_b(hs_3: handshakestate)) in
        {64}in(pub, message_b: bitstring);
        {65}let v_48: bitstring = catch-fail(handshakestateunpack(hs_3)) in
        {66}let v_49: bitstring = catch-fail(deconcat3(message_b)) in
        {67}let v_50: bool = catch-fail(true) in
        {68}let v_51: key = catch-fail(1-proj-3-tuple(v_49)) in
        {69}let v_52: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_48))) in
        {70}let v_53: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_48)) then (if (not-caught-fail(v_52) && success?(is-true(success?(1-proj-3-tuple(v_52))))) then symmetricstatepack(1-proj-3-tuple(v_52),2-proj-3-tuple(v_52),hash(3-proj-3-tuple(v_52),v_51)) else fail-any) else fail-any)) in
        {71}let v_54: bitstring = catch-fail(symmetricstateunpack(v_53)) in
        {72}let v_55: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_54),v_51)) in
        {73}let v_56: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_54),v_51)) in
        {74}let v_57: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_54),v_51)) in
        {75}let v_58: bitstring = catch-fail((if success?(2-proj-3-tuple(v_54)) then (if not-caught-fail(v_55) then (if not-caught-fail(v_56) then (if not-caught-fail(v_57) then (v_55,v_56,v_57) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_59: symmetricstate = catch-fail((if (not-caught-fail(v_54) && success?(is-true(success?(1-proj-3-tuple(v_54))))) then (if (not-caught-fail(v_58) && success?(is-true(success?(1-proj-3-tuple(v_58))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_58)) then cipherstatepack(2-proj-3-tuple(v_58),minnonce) else fail-any),1-proj-3-tuple(v_58),3-proj-3-tuple(v_54)) else fail-any) else fail-any)) in
        {77}let v_60: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_48))) in
        {78}let v_61: bitstring = catch-fail(symmetricstateunpack(v_59)) in
        {79}let v_62: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_61),(if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_60) && success?(is-true(success?(1-proj-2-tuple(v_60))))) then dhexp(2-proj-2-tuple(v_60),v_51) else fail-any) else fail-any))) in
        {80}let v_63: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_61),(if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_60) && success?(is-true(success?(1-proj-2-tuple(v_60))))) then dhexp(2-proj-2-tuple(v_60),v_51) else fail-any) else fail-any))) in
        {81}let v_64: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_61),(if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_60) && success?(is-true(success?(1-proj-2-tuple(v_60))))) then dhexp(2-proj-2-tuple(v_60),v_51) else fail-any) else fail-any))) in
        {82}let v_65: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_60) && success?(is-true(success?(1-proj-2-tuple(v_60))))) then dhexp(2-proj-2-tuple(v_60),v_51) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_61))) then (if not-caught-fail(v_62) then (if not-caught-fail(v_63) then (if not-caught-fail(v_64) then (v_62,v_63,v_64) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_66: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_60) && success?(is-true(success?(1-proj-2-tuple(v_60))))) then dhexp(2-proj-2-tuple(v_60),v_51) else fail-any) else fail-any)) then (if (not-caught-fail(v_61) && success?(is-true(success?(1-proj-3-tuple(v_61))))) then (if (not-caught-fail(v_65) && success?(is-true(success?(1-proj-3-tuple(v_65))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_65)) then cipherstatepack(2-proj-3-tuple(v_65),minnonce) else fail-any),1-proj-3-tuple(v_65),3-proj-3-tuple(v_61)) else fail-any) else fail-any) else fail-any)) in
        {84}let v_67: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_48))) in
        {85}let v_68: bitstring = catch-fail(symmetricstateunpack(v_66)) in
        {86}let v_69: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_68),(if success?(2-proj-7-tuple(v_48)) then (if (not-caught-fail(v_67) && success?(is-true(success?(1-proj-2-tuple(v_67))))) then dhexp(2-proj-2-tuple(v_67),v_51) else fail-any) else fail-any))) in
        {87}let v_70: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_68),(if success?(2-proj-7-tuple(v_48)) then (if (not-caught-fail(v_67) && success?(is-true(success?(1-proj-2-tuple(v_67))))) then dhexp(2-proj-2-tuple(v_67),v_51) else fail-any) else fail-any))) in
        {88}let v_71: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_68),(if success?(2-proj-7-tuple(v_48)) then (if (not-caught-fail(v_67) && success?(is-true(success?(1-proj-2-tuple(v_67))))) then dhexp(2-proj-2-tuple(v_67),v_51) else fail-any) else fail-any))) in
        {89}let v_72: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_48)) then (if (not-caught-fail(v_67) && success?(is-true(success?(1-proj-2-tuple(v_67))))) then dhexp(2-proj-2-tuple(v_67),v_51) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_68))) then (if not-caught-fail(v_69) then (if not-caught-fail(v_70) then (if not-caught-fail(v_71) then (v_69,v_70,v_71) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_73: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_48)) then (if (not-caught-fail(v_67) && success?(is-true(success?(1-proj-2-tuple(v_67))))) then dhexp(2-proj-2-tuple(v_67),v_51) else fail-any) else fail-any)) then (if (not-caught-fail(v_68) && success?(is-true(success?(1-proj-3-tuple(v_68))))) then (if (not-caught-fail(v_72) && success?(is-true(success?(1-proj-3-tuple(v_72))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_72)) then cipherstatepack(2-proj-3-tuple(v_72),minnonce) else fail-any),1-proj-3-tuple(v_72),3-proj-3-tuple(v_68)) else fail-any) else fail-any) else fail-any)) in
        {91}let v_74: bitstring = catch-fail(symmetricstateunpack(v_73)) in
        {92}let v_75: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_74))) in
        {93}let v_76: aead = catch-fail(decrypt(1-proj-2-tuple(v_75),2-proj-2-tuple(v_75),3-proj-3-tuple(v_74),2-proj-3-tuple(v_49))) in
        {94}let v_77: bitstring = catch-fail(aeadunpack(v_76)) in
        {95}let v_78: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_74))) in
        {96}let v_79: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_75))) && success?(1-proj-3-tuple(v_74))) then (if (not-caught-fail(v_78) && success?(is-true(success?(1-proj-2-tuple(v_78))))) then cipherstatepack(1-proj-2-tuple(v_78),increment_nonce(2-proj-2-tuple(v_75))) else fail-any) else fail-any)) in
        {97}let v_80: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_49)) && (success?(3-proj-3-tuple(v_74)) && success?(1-proj-3-tuple(v_74)))) then (if (not-caught-fail(v_75) && success?(is-true(success?(1-proj-2-tuple(v_75))))) then (if not-caught-fail(v_76) then (if (not-caught-fail(v_77) && success?(is-true(success?(1-proj-3-tuple(v_77))))) then (if not-caught-fail(v_79) then (v_79,3-proj-3-tuple(v_77),1-proj-3-tuple(v_77)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_81: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_80),2-proj-3-tuple(v_74),3-proj-3-tuple(v_74)))) in
        {99}let v_82: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_49)) && success?(symmetricstatepack(1-proj-3-tuple(v_80),2-proj-3-tuple(v_74),3-proj-3-tuple(v_74)))) then (if (not-caught-fail(v_81) && success?(is-true(success?(1-proj-3-tuple(v_81))))) then symmetricstatepack(1-proj-3-tuple(v_81),2-proj-3-tuple(v_81),hash(3-proj-3-tuple(v_81),2-proj-3-tuple(v_49))) else fail-any) else fail-any)) in
        {100}let v_83: bitstring = catch-fail((if success?(2-proj-3-tuple(v_49)) then (if (not-caught-fail(v_74) && success?(is-true(success?(1-proj-3-tuple(v_74))))) then (if (not-caught-fail(v_80) && success?(is-true(success?(1-proj-3-tuple(v_80))))) then (if not-caught-fail(v_82) then (v_82,2-proj-3-tuple(v_80),3-proj-3-tuple(v_80)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {101}let v_84: key = catch-fail(2-proj-3-tuple(v_83)) in
        {102}let v_85: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_48))) in
        {103}let v_86: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_83))) in
        {104}let v_87: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_86),(if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_85) && success?(is-true(success?(1-proj-2-tuple(v_85))))) then dhexp(2-proj-2-tuple(v_85),v_84) else fail-any) else fail-any))) in
        {105}let v_88: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_86),(if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_85) && success?(is-true(success?(1-proj-2-tuple(v_85))))) then dhexp(2-proj-2-tuple(v_85),v_84) else fail-any) else fail-any))) in
        {106}let v_89: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_86),(if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_85) && success?(is-true(success?(1-proj-2-tuple(v_85))))) then dhexp(2-proj-2-tuple(v_85),v_84) else fail-any) else fail-any))) in
        {107}let v_90: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_85) && success?(is-true(success?(1-proj-2-tuple(v_85))))) then dhexp(2-proj-2-tuple(v_85),v_84) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_86))) then (if not-caught-fail(v_87) then (if not-caught-fail(v_88) then (if not-caught-fail(v_89) then (v_87,v_88,v_89) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_91: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_48)) then (if (not-caught-fail(v_85) && success?(is-true(success?(1-proj-2-tuple(v_85))))) then dhexp(2-proj-2-tuple(v_85),v_84) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_83))) then (if (not-caught-fail(v_86) && success?(is-true(success?(1-proj-3-tuple(v_86))))) then (if (not-caught-fail(v_90) && success?(is-true(success?(1-proj-3-tuple(v_90))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_90)) then cipherstatepack(2-proj-3-tuple(v_90),minnonce) else fail-any),1-proj-3-tuple(v_90),3-proj-3-tuple(v_86)) else fail-any) else fail-any) else fail-any)) in
        {109}let v_92: bitstring = catch-fail(symmetricstateunpack(v_91)) in
        {110}let v_93: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_92))) in
        {111}let v_94: aead = catch-fail(decrypt(1-proj-2-tuple(v_93),2-proj-2-tuple(v_93),3-proj-3-tuple(v_92),3-proj-3-tuple(v_49))) in
        {112}let v_95: bitstring = catch-fail(aeadunpack(v_94)) in
        {113}let v_96: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_92))) in
        {114}let v_97: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_93))) && success?(1-proj-3-tuple(v_92))) then (if (not-caught-fail(v_96) && success?(is-true(success?(1-proj-2-tuple(v_96))))) then cipherstatepack(1-proj-2-tuple(v_96),increment_nonce(2-proj-2-tuple(v_93))) else fail-any) else fail-any)) in
        {115}let v_98: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_49)) && (success?(3-proj-3-tuple(v_92)) && success?(1-proj-3-tuple(v_92)))) then (if (not-caught-fail(v_93) && success?(is-true(success?(1-proj-2-tuple(v_93))))) then (if not-caught-fail(v_94) then (if (not-caught-fail(v_95) && success?(is-true(success?(1-proj-3-tuple(v_95))))) then (if not-caught-fail(v_97) then (v_97,3-proj-3-tuple(v_95),1-proj-3-tuple(v_95)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_99: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_98),2-proj-3-tuple(v_92),3-proj-3-tuple(v_92)))) in
        {117}let v_100: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_49)) && success?(symmetricstatepack(1-proj-3-tuple(v_98),2-proj-3-tuple(v_92),3-proj-3-tuple(v_92)))) then (if (not-caught-fail(v_99) && success?(is-true(success?(1-proj-3-tuple(v_99))))) then symmetricstatepack(1-proj-3-tuple(v_99),2-proj-3-tuple(v_99),hash(3-proj-3-tuple(v_99),3-proj-3-tuple(v_49))) else fail-any) else fail-any)) in
        {118}let v_101: bitstring = catch-fail((if success?(3-proj-3-tuple(v_49)) then (if (not-caught-fail(v_92) && success?(is-true(success?(1-proj-3-tuple(v_92))))) then (if (not-caught-fail(v_98) && success?(is-true(success?(1-proj-3-tuple(v_98))))) then (if not-caught-fail(v_100) then (v_100,2-proj-3-tuple(v_98),3-proj-3-tuple(v_98)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let v_102: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {120}let v_103: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_101),2-proj-7-tuple(v_48),3-proj-7-tuple(v_48),v_84,v_51,6-proj-7-tuple(v_48),7-proj-7-tuple(v_48))) in
        {121}let v_104: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_101))) in
        {122}let v_105: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_104),zero)) in
        {123}let v_106: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_104),zero)) in
        {124}let v_107: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_104),zero)) in
        {125}let v_108: bitstring = catch-fail((if success?(2-proj-3-tuple(v_104)) then (if not-caught-fail(v_105) then (if not-caught-fail(v_106) then (if not-caught-fail(v_107) then (v_105,v_106,v_107) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_109: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_108)) then cipherstatepack(1-proj-3-tuple(v_108),minnonce) else fail-any)) in
        {127}let v_110: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_108)) then cipherstatepack(2-proj-3-tuple(v_108),minnonce) else fail-any)) in
        {128}let v_111: bitstring = catch-fail((if success?(1-proj-3-tuple(v_101)) then (if (not-caught-fail(v_104) && success?(is-true(success?(1-proj-3-tuple(v_104))))) then (if (not-caught-fail(v_108) && success?(is-true(success?(1-proj-3-tuple(v_108))))) then (if not-caught-fail(v_109) then (if not-caught-fail(v_110) then (1-proj-3-tuple(v_101),v_109,v_110) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {129}let (hs_4: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_48) && success?(is-true(success?(1-proj-7-tuple(v_48))))) then (if (not-caught-fail(v_49) && success?(is-true(success?(1-proj-3-tuple(v_49))))) then (if not-caught-fail(v_50) then (if not-caught-fail(v_51) then (if not-caught-fail(v_53) then (if not-caught-fail(v_59) then (if not-caught-fail(v_66) then (if not-caught-fail(v_73) then (if (not-caught-fail(v_83) && success?(is-true(success?(1-proj-3-tuple(v_83))))) then (if not-caught-fail(v_84) then (if not-caught-fail(v_91) then (if (not-caught-fail(v_101) && success?(is-true(success?(1-proj-3-tuple(v_101))))) then (if ((3-proj-3-tuple(v_83) && 3-proj-3-tuple(v_101)) && (v_84 = getpublickey((if not-caught-fail(v_102) then keypairpack(validkey(v_102),key_s(bob)) else fail-any)))) then (if not-caught-fail(v_103) then (if (not-caught-fail(v_111) && success?(is-true(success?(1-proj-3-tuple(v_111))))) then (v_103,2-proj-3-tuple(v_101),true,2-proj-3-tuple(v_111),3-proj-3-tuple(v_111)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {130}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {131}insert statestore(alice,bob,sid,statepack_c(hs_4,cs1,cs2))
    ) | (
        {133}!
        {152}get statestore(=alice,=bob,=sid,statepack_c(hs_5: handshakestate,cs1_1: cipherstate,cs2_1: cipherstate)) in
        {134}let hs_6: handshakestate = handshakestatesetcs(hs_5,cs1_1) in
        {135}let v_112: bitstring = catch-fail(handshakestateunpack(hs_6)) in
        {136}let v_113: bitstring = catch-fail((empty,empty,empty)) in
        {137}let v_114: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_112))) in
        {138}let v_115: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_114))) in
        {139}let v_116: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_115),2-proj-2-tuple(v_115),3-proj-3-tuple(v_114),msg_c(alice,bob,sid))) in
        {140}let v_117: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_114))) in
        {141}let v_118: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_115))) && success?(1-proj-3-tuple(v_114))) then (if (not-caught-fail(v_117) && success?(is-true(success?(1-proj-2-tuple(v_117))))) then cipherstatepack(1-proj-2-tuple(v_117),increment_nonce(2-proj-2-tuple(v_115))) else fail-any) else fail-any)) in
        {142}let v_119: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_114)) && success?(1-proj-3-tuple(v_114))) then (if (not-caught-fail(v_115) && success?(is-true(success?(1-proj-2-tuple(v_115))))) then (if not-caught-fail(v_116) then (if not-caught-fail(v_118) then (v_118,v_116) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {143}let v_120: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_119),2-proj-3-tuple(v_114),3-proj-3-tuple(v_114)))) in
        {144}let v_121: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_119)) && success?(symmetricstatepack(1-proj-2-tuple(v_119),2-proj-3-tuple(v_114),3-proj-3-tuple(v_114)))) then (if (not-caught-fail(v_120) && success?(is-true(success?(1-proj-3-tuple(v_120))))) then symmetricstatepack(1-proj-3-tuple(v_120),2-proj-3-tuple(v_120),hash(3-proj-3-tuple(v_120),2-proj-2-tuple(v_119))) else fail-any) else fail-any)) in
        {145}let v_122: bitstring = catch-fail((if success?(1-proj-7-tuple(v_112)) then (if (not-caught-fail(v_114) && success?(is-true(success?(1-proj-3-tuple(v_114))))) then (if (not-caught-fail(v_119) && success?(is-true(success?(1-proj-2-tuple(v_119))))) then (if not-caught-fail(v_121) then (v_121,2-proj-2-tuple(v_119)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {146}let v_123: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_122),2-proj-7-tuple(v_112),3-proj-7-tuple(v_112),4-proj-7-tuple(v_112),5-proj-7-tuple(v_112),6-proj-7-tuple(v_112),7-proj-7-tuple(v_112))) in
        {147}let v_124: bitstring = catch-fail(concat3(1-proj-3-tuple(v_113),2-proj-3-tuple(v_113),2-proj-2-tuple(v_122))) in
        {148}let (hs_7: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_112) && success?(is-true(success?(1-proj-7-tuple(v_112))))) then (if (not-caught-fail(v_113) && success?(is-true(success?(1-proj-3-tuple(v_113))))) then (if (not-caught-fail(v_122) && success?(is-true(success?(1-proj-2-tuple(v_122))))) then (if not-caught-fail(v_123) then (if not-caught-fail(v_124) then (v_123,v_124) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {149}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {150}insert statestore(alice,bob,sid,statepack_d(hs_7,handshakestategetcs(hs_7),cs2_1));
        {151}out(pub, message_c)
    ) | (
        {153}!
        {173}get statestore(=alice,=bob,=sid,statepack_d(hs_8: handshakestate,cs1_2: cipherstate,cs2_2: cipherstate)) in
        {154}let hs_9: handshakestate = handshakestatesetcs(hs_8,cs2_2) in
        {155}in(pub, message_d: bitstring);
        {156}let v_125: bitstring = catch-fail(handshakestateunpack(hs_9)) in
        {157}let v_126: bitstring = catch-fail(deconcat3(message_d)) in
        {158}let v_127: bool = catch-fail(true) in
        {159}let v_128: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_125))) in
        {160}let v_129: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_128))) in
        {161}let v_130: aead = catch-fail(decrypt(1-proj-2-tuple(v_129),2-proj-2-tuple(v_129),3-proj-3-tuple(v_128),3-proj-3-tuple(v_126))) in
        {162}let v_131: bitstring = catch-fail(aeadunpack(v_130)) in
        {163}let v_132: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_128))) in
        {164}let v_133: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_129))) && success?(1-proj-3-tuple(v_128))) then (if (not-caught-fail(v_132) && success?(is-true(success?(1-proj-2-tuple(v_132))))) then cipherstatepack(1-proj-2-tuple(v_132),increment_nonce(2-proj-2-tuple(v_129))) else fail-any) else fail-any)) in
        {165}let v_134: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_126)) && (success?(3-proj-3-tuple(v_128)) && success?(1-proj-3-tuple(v_128)))) then (if (not-caught-fail(v_129) && success?(is-true(success?(1-proj-2-tuple(v_129))))) then (if not-caught-fail(v_130) then (if (not-caught-fail(v_131) && success?(is-true(success?(1-proj-3-tuple(v_131))))) then (if not-caught-fail(v_133) then (v_133,3-proj-3-tuple(v_131),1-proj-3-tuple(v_131)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {166}let v_135: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_134),2-proj-3-tuple(v_128),3-proj-3-tuple(v_128)))) in
        {167}let v_136: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_126)) && success?(symmetricstatepack(1-proj-3-tuple(v_134),2-proj-3-tuple(v_128),3-proj-3-tuple(v_128)))) then (if (not-caught-fail(v_135) && success?(is-true(success?(1-proj-3-tuple(v_135))))) then symmetricstatepack(1-proj-3-tuple(v_135),2-proj-3-tuple(v_135),hash(3-proj-3-tuple(v_135),3-proj-3-tuple(v_126))) else fail-any) else fail-any)) in
        {168}let v_137: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_126)) && success?(1-proj-7-tuple(v_125))) then (if (not-caught-fail(v_128) && success?(is-true(success?(1-proj-3-tuple(v_128))))) then (if (not-caught-fail(v_134) && success?(is-true(success?(1-proj-3-tuple(v_134))))) then (if not-caught-fail(v_136) then (v_136,2-proj-3-tuple(v_134),3-proj-3-tuple(v_134)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {169}let v_138: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_137),2-proj-7-tuple(v_125),3-proj-7-tuple(v_125),4-proj-7-tuple(v_125),5-proj-7-tuple(v_125),6-proj-7-tuple(v_125),7-proj-7-tuple(v_125))) in
        {170}let (hs_10: handshakestate,plaintext_d: bitstring,valid_1: bool) = (if (not-caught-fail(v_125) && success?(is-true(success?(1-proj-7-tuple(v_125))))) then (if (not-caught-fail(v_126) && success?(is-true(success?(1-proj-3-tuple(v_126))))) then (if not-caught-fail(v_127) then (if (not-caught-fail(v_137) && success?(is-true(success?(1-proj-3-tuple(v_137))))) then (if (v_127 && 3-proj-3-tuple(v_137)) then (if not-caught-fail(v_138) then (v_138,2-proj-3-tuple(v_137),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {171}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {172}event RecvEnd(valid_1)
    ) | (
        {174}event LeakPsk(phase0,alice,bob);
        {175}out(pub, key_psk(alice,bob))
    ) | (
        {176}phase 1;
        {177}event LeakPsk(phase1,alice,bob);
        {178}out(pub, key_psk(alice,bob))
    ) | (
        {179}event LeakS(phase0,alice);
        {180}out(pub, key_s(alice))
    ) | (
        {181}phase 1;
        {182}event LeakS(phase1,alice);
        {183}out(pub, key_s(alice))
    )
) | (
    {184}let s_1: keypair = keypairpack(empty,empty) in
    {185}out(pub, getpublickey(s_1));
    (
        {186}let e_1: keypair = keypairpack(empty,empty) in
        {187}let rs_1: key = empty in
        {188}let re_1: key = empty in
        {189}let v_139: bitstring = catch-fail(hash(somename,empty)) in
        {190}let v_140: key = catch-fail(v_139) in
        {191}let v_141: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {192}let v_142: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_139) then (if not-caught-fail(v_140) then (if not-caught-fail(v_141) then symmetricstatepack(v_141,v_140,v_139) else fail-any) else fail-any) else fail-any))) in
        {193}let v_143: symmetricstate = catch-fail((if success?((if not-caught-fail(v_139) then (if not-caught-fail(v_140) then (if not-caught-fail(v_141) then symmetricstatepack(v_141,v_140,v_139) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_142) && success?(is-true(success?(1-proj-3-tuple(v_142))))) then symmetricstatepack(1-proj-3-tuple(v_142),2-proj-3-tuple(v_142),hash(3-proj-3-tuple(v_142),empty)) else fail-any) else fail-any)) in
        {194}let hs_11: handshakestate = (if not-caught-fail(v_143) then handshakestatepack(v_143,s_1,e_1,rs_1,re_1,key_psk(alice,charlie),true) else fail-any) in
        {195}insert statestore(alice,charlie,sid,statepack_a(hs_11))
    ) | (
        {243}get statestore(=alice,=charlie,=sid,statepack_a(hs_12: handshakestate)) in
        {196}let v_144: bitstring = catch-fail(handshakestateunpack(hs_12)) in
        {197}let v_145: bitstring = catch-fail((empty,empty,empty)) in
        {198}let v_146: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_144))) in
        {199}let v_147: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_146),6-proj-7-tuple(v_144))) in
        {200}let v_148: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_146),6-proj-7-tuple(v_144))) in
        {201}let v_149: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_146),6-proj-7-tuple(v_144))) in
        {202}let v_150: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_144)) && success?(2-proj-3-tuple(v_146))) then (if not-caught-fail(v_147) then (if not-caught-fail(v_148) then (if not-caught-fail(v_149) then (v_147,v_148,v_149) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let v_151: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_146),1-proj-3-tuple(v_150),3-proj-3-tuple(v_146)))) in
        {204}let v_152: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_150)) && success?(symmetricstatepack(1-proj-3-tuple(v_146),1-proj-3-tuple(v_150),3-proj-3-tuple(v_146)))) then (if (not-caught-fail(v_151) && success?(is-true(success?(1-proj-3-tuple(v_151))))) then symmetricstatepack(1-proj-3-tuple(v_151),2-proj-3-tuple(v_151),hash(3-proj-3-tuple(v_151),2-proj-3-tuple(v_150))) else fail-any) else fail-any))) in
        {205}let v_153: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_144)) && success?(1-proj-7-tuple(v_144))) then (if (not-caught-fail(v_146) && success?(is-true(success?(1-proj-3-tuple(v_146))))) then (if (not-caught-fail(v_150) && success?(is-true(success?(1-proj-3-tuple(v_150))))) then (if (not-caught-fail(v_152) && success?(is-true(success?(1-proj-3-tuple(v_152))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_150)) then cipherstatepack(3-proj-3-tuple(v_150),minnonce) else fail-any),1-proj-3-tuple(v_150),3-proj-3-tuple(v_152)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_154: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {207}let v_155: keypair = catch-fail((if not-caught-fail(v_154) then keypairpack(validkey(v_154),key_e(alice,charlie,sid)) else fail-any)) in
        {208}let v_156: bitstring = catch-fail(getpublickey(v_155)) in
        {209}let v_157: bitstring = catch-fail(symmetricstateunpack(v_153)) in
        {210}let v_158: symmetricstate = catch-fail((if (not-caught-fail(v_157) && success?(is-true(success?(1-proj-3-tuple(v_157))))) then symmetricstatepack(1-proj-3-tuple(v_157),2-proj-3-tuple(v_157),hash(3-proj-3-tuple(v_157),v_156)) else fail-any)) in
        {211}let v_159: bitstring = catch-fail(symmetricstateunpack(v_158)) in
        {212}let v_160: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_159),getpublickey(v_155))) in
        {213}let v_161: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_159),getpublickey(v_155))) in
        {214}let v_162: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_159),getpublickey(v_155))) in
        {215}let v_163: bitstring = catch-fail((if (success?(getpublickey(v_155)) && success?(2-proj-3-tuple(v_159))) then (if not-caught-fail(v_160) then (if not-caught-fail(v_161) then (if not-caught-fail(v_162) then (v_160,v_161,v_162) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_164: symmetricstate = catch-fail((if success?(getpublickey(v_155)) then (if (not-caught-fail(v_159) && success?(is-true(success?(1-proj-3-tuple(v_159))))) then (if (not-caught-fail(v_163) && success?(is-true(success?(1-proj-3-tuple(v_163))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_163)) then cipherstatepack(2-proj-3-tuple(v_163),minnonce) else fail-any),1-proj-3-tuple(v_163),3-proj-3-tuple(v_159)) else fail-any) else fail-any) else fail-any)) in
        {217}let v_165: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {218}let v_166: keypair = catch-fail((if not-caught-fail(v_165) then keypairpack(validkey(v_165),key_s(alice)) else fail-any)) in
        {219}let v_167: bitstring = catch-fail(symmetricstateunpack(v_164)) in
        {220}let v_168: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_167))) in
        {221}let v_169: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_168),2-proj-2-tuple(v_168),3-proj-3-tuple(v_167),getpublickey(v_166))) in
        {222}let v_170: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_167))) in
        {223}let v_171: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_168))) && success?(1-proj-3-tuple(v_167))) then (if (not-caught-fail(v_170) && success?(is-true(success?(1-proj-2-tuple(v_170))))) then cipherstatepack(1-proj-2-tuple(v_170),increment_nonce(2-proj-2-tuple(v_168))) else fail-any) else fail-any)) in
        {224}let v_172: bitstring = catch-fail((if (success?(getpublickey(v_166)) && (success?(3-proj-3-tuple(v_167)) && success?(1-proj-3-tuple(v_167)))) then (if (not-caught-fail(v_168) && success?(is-true(success?(1-proj-2-tuple(v_168))))) then (if not-caught-fail(v_169) then (if not-caught-fail(v_171) then (v_171,v_169) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_173: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_172),2-proj-3-tuple(v_167),3-proj-3-tuple(v_167)))) in
        {226}let v_174: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_172)) && success?(symmetricstatepack(1-proj-2-tuple(v_172),2-proj-3-tuple(v_167),3-proj-3-tuple(v_167)))) then (if (not-caught-fail(v_173) && success?(is-true(success?(1-proj-3-tuple(v_173))))) then symmetricstatepack(1-proj-3-tuple(v_173),2-proj-3-tuple(v_173),hash(3-proj-3-tuple(v_173),2-proj-2-tuple(v_172))) else fail-any) else fail-any)) in
        {227}let v_175: bitstring = catch-fail((if success?(getpublickey(v_166)) then (if (not-caught-fail(v_167) && success?(is-true(success?(1-proj-3-tuple(v_167))))) then (if (not-caught-fail(v_172) && success?(is-true(success?(1-proj-2-tuple(v_172))))) then (if not-caught-fail(v_174) then (v_174,2-proj-2-tuple(v_172)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_176: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_175))) in
        {229}let v_177: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_176))) in
        {230}let v_178: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_177),2-proj-2-tuple(v_177),3-proj-3-tuple(v_176),msg_a(alice,charlie,sid))) in
        {231}let v_179: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_176))) in
        {232}let v_180: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_177))) && success?(1-proj-3-tuple(v_176))) then (if (not-caught-fail(v_179) && success?(is-true(success?(1-proj-2-tuple(v_179))))) then cipherstatepack(1-proj-2-tuple(v_179),increment_nonce(2-proj-2-tuple(v_177))) else fail-any) else fail-any)) in
        {233}let v_181: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_176)) && success?(1-proj-3-tuple(v_176))) then (if (not-caught-fail(v_177) && success?(is-true(success?(1-proj-2-tuple(v_177))))) then (if not-caught-fail(v_178) then (if not-caught-fail(v_180) then (v_180,v_178) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {234}let v_182: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_181),2-proj-3-tuple(v_176),3-proj-3-tuple(v_176)))) in
        {235}let v_183: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_181)) && success?(symmetricstatepack(1-proj-2-tuple(v_181),2-proj-3-tuple(v_176),3-proj-3-tuple(v_176)))) then (if (not-caught-fail(v_182) && success?(is-true(success?(1-proj-3-tuple(v_182))))) then symmetricstatepack(1-proj-3-tuple(v_182),2-proj-3-tuple(v_182),hash(3-proj-3-tuple(v_182),2-proj-2-tuple(v_181))) else fail-any) else fail-any)) in
        {236}let v_184: bitstring = catch-fail((if success?(1-proj-2-tuple(v_175)) then (if (not-caught-fail(v_176) && success?(is-true(success?(1-proj-3-tuple(v_176))))) then (if (not-caught-fail(v_181) && success?(is-true(success?(1-proj-2-tuple(v_181))))) then (if not-caught-fail(v_183) then (v_183,2-proj-2-tuple(v_181)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_185: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_184),v_166,v_155,4-proj-7-tuple(v_144),5-proj-7-tuple(v_144),6-proj-7-tuple(v_144),7-proj-7-tuple(v_144))) in
        {238}let v_186: bitstring = catch-fail(concat3(v_156,2-proj-2-tuple(v_175),2-proj-2-tuple(v_184))) in
        {239}let (hs_13: handshakestate,message_a_1: bitstring) = (if (not-caught-fail(v_144) && success?(is-true(success?(1-proj-7-tuple(v_144))))) then (if (not-caught-fail(v_145) && success?(is-true(success?(1-proj-3-tuple(v_145))))) then (if not-caught-fail(v_153) then (if not-caught-fail(v_155) then (if not-caught-fail(v_156) then (if not-caught-fail(v_158) then (if not-caught-fail(v_164) then (if not-caught-fail(v_166) then (if (not-caught-fail(v_175) && success?(is-true(success?(1-proj-2-tuple(v_175))))) then (if (not-caught-fail(v_184) && success?(is-true(success?(1-proj-2-tuple(v_184))))) then (if not-caught-fail(v_185) then (if not-caught-fail(v_186) then (v_185,v_186) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {240}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {241}insert statestore(alice,charlie,sid,statepack_b(hs_13));
        {242}out(pub, message_a_1)
    ) | (
        {312}get statestore(=alice,=charlie,=sid,statepack_b(hs_14: handshakestate)) in
        {244}in(pub, message_b_1: bitstring);
        {245}let v_187: bitstring = catch-fail(handshakestateunpack(hs_14)) in
        {246}let v_188: bitstring = catch-fail(deconcat3(message_b_1)) in
        {247}let v_189: bool = catch-fail(true) in
        {248}let v_190: key = catch-fail(1-proj-3-tuple(v_188)) in
        {249}let v_191: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_187))) in
        {250}let v_192: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_187)) then (if (not-caught-fail(v_191) && success?(is-true(success?(1-proj-3-tuple(v_191))))) then symmetricstatepack(1-proj-3-tuple(v_191),2-proj-3-tuple(v_191),hash(3-proj-3-tuple(v_191),v_190)) else fail-any) else fail-any)) in
        {251}let v_193: bitstring = catch-fail(symmetricstateunpack(v_192)) in
        {252}let v_194: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_193),v_190)) in
        {253}let v_195: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_193),v_190)) in
        {254}let v_196: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_193),v_190)) in
        {255}let v_197: bitstring = catch-fail((if success?(2-proj-3-tuple(v_193)) then (if not-caught-fail(v_194) then (if not-caught-fail(v_195) then (if not-caught-fail(v_196) then (v_194,v_195,v_196) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_198: symmetricstate = catch-fail((if (not-caught-fail(v_193) && success?(is-true(success?(1-proj-3-tuple(v_193))))) then (if (not-caught-fail(v_197) && success?(is-true(success?(1-proj-3-tuple(v_197))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_197)) then cipherstatepack(2-proj-3-tuple(v_197),minnonce) else fail-any),1-proj-3-tuple(v_197),3-proj-3-tuple(v_193)) else fail-any) else fail-any)) in
        {257}let v_199: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_187))) in
        {258}let v_200: bitstring = catch-fail(symmetricstateunpack(v_198)) in
        {259}let v_201: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_200),(if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_199) && success?(is-true(success?(1-proj-2-tuple(v_199))))) then dhexp(2-proj-2-tuple(v_199),v_190) else fail-any) else fail-any))) in
        {260}let v_202: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_200),(if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_199) && success?(is-true(success?(1-proj-2-tuple(v_199))))) then dhexp(2-proj-2-tuple(v_199),v_190) else fail-any) else fail-any))) in
        {261}let v_203: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_200),(if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_199) && success?(is-true(success?(1-proj-2-tuple(v_199))))) then dhexp(2-proj-2-tuple(v_199),v_190) else fail-any) else fail-any))) in
        {262}let v_204: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_199) && success?(is-true(success?(1-proj-2-tuple(v_199))))) then dhexp(2-proj-2-tuple(v_199),v_190) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_200))) then (if not-caught-fail(v_201) then (if not-caught-fail(v_202) then (if not-caught-fail(v_203) then (v_201,v_202,v_203) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_205: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_199) && success?(is-true(success?(1-proj-2-tuple(v_199))))) then dhexp(2-proj-2-tuple(v_199),v_190) else fail-any) else fail-any)) then (if (not-caught-fail(v_200) && success?(is-true(success?(1-proj-3-tuple(v_200))))) then (if (not-caught-fail(v_204) && success?(is-true(success?(1-proj-3-tuple(v_204))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_204)) then cipherstatepack(2-proj-3-tuple(v_204),minnonce) else fail-any),1-proj-3-tuple(v_204),3-proj-3-tuple(v_200)) else fail-any) else fail-any) else fail-any)) in
        {264}let v_206: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_187))) in
        {265}let v_207: bitstring = catch-fail(symmetricstateunpack(v_205)) in
        {266}let v_208: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_207),(if success?(2-proj-7-tuple(v_187)) then (if (not-caught-fail(v_206) && success?(is-true(success?(1-proj-2-tuple(v_206))))) then dhexp(2-proj-2-tuple(v_206),v_190) else fail-any) else fail-any))) in
        {267}let v_209: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_207),(if success?(2-proj-7-tuple(v_187)) then (if (not-caught-fail(v_206) && success?(is-true(success?(1-proj-2-tuple(v_206))))) then dhexp(2-proj-2-tuple(v_206),v_190) else fail-any) else fail-any))) in
        {268}let v_210: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_207),(if success?(2-proj-7-tuple(v_187)) then (if (not-caught-fail(v_206) && success?(is-true(success?(1-proj-2-tuple(v_206))))) then dhexp(2-proj-2-tuple(v_206),v_190) else fail-any) else fail-any))) in
        {269}let v_211: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_187)) then (if (not-caught-fail(v_206) && success?(is-true(success?(1-proj-2-tuple(v_206))))) then dhexp(2-proj-2-tuple(v_206),v_190) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_207))) then (if not-caught-fail(v_208) then (if not-caught-fail(v_209) then (if not-caught-fail(v_210) then (v_208,v_209,v_210) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_212: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_187)) then (if (not-caught-fail(v_206) && success?(is-true(success?(1-proj-2-tuple(v_206))))) then dhexp(2-proj-2-tuple(v_206),v_190) else fail-any) else fail-any)) then (if (not-caught-fail(v_207) && success?(is-true(success?(1-proj-3-tuple(v_207))))) then (if (not-caught-fail(v_211) && success?(is-true(success?(1-proj-3-tuple(v_211))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_211)) then cipherstatepack(2-proj-3-tuple(v_211),minnonce) else fail-any),1-proj-3-tuple(v_211),3-proj-3-tuple(v_207)) else fail-any) else fail-any) else fail-any)) in
        {271}let v_213: bitstring = catch-fail(symmetricstateunpack(v_212)) in
        {272}let v_214: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_213))) in
        {273}let v_215: aead = catch-fail(decrypt(1-proj-2-tuple(v_214),2-proj-2-tuple(v_214),3-proj-3-tuple(v_213),2-proj-3-tuple(v_188))) in
        {274}let v_216: bitstring = catch-fail(aeadunpack(v_215)) in
        {275}let v_217: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_213))) in
        {276}let v_218: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_214))) && success?(1-proj-3-tuple(v_213))) then (if (not-caught-fail(v_217) && success?(is-true(success?(1-proj-2-tuple(v_217))))) then cipherstatepack(1-proj-2-tuple(v_217),increment_nonce(2-proj-2-tuple(v_214))) else fail-any) else fail-any)) in
        {277}let v_219: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_188)) && (success?(3-proj-3-tuple(v_213)) && success?(1-proj-3-tuple(v_213)))) then (if (not-caught-fail(v_214) && success?(is-true(success?(1-proj-2-tuple(v_214))))) then (if not-caught-fail(v_215) then (if (not-caught-fail(v_216) && success?(is-true(success?(1-proj-3-tuple(v_216))))) then (if not-caught-fail(v_218) then (v_218,3-proj-3-tuple(v_216),1-proj-3-tuple(v_216)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {278}let v_220: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_219),2-proj-3-tuple(v_213),3-proj-3-tuple(v_213)))) in
        {279}let v_221: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_188)) && success?(symmetricstatepack(1-proj-3-tuple(v_219),2-proj-3-tuple(v_213),3-proj-3-tuple(v_213)))) then (if (not-caught-fail(v_220) && success?(is-true(success?(1-proj-3-tuple(v_220))))) then symmetricstatepack(1-proj-3-tuple(v_220),2-proj-3-tuple(v_220),hash(3-proj-3-tuple(v_220),2-proj-3-tuple(v_188))) else fail-any) else fail-any)) in
        {280}let v_222: bitstring = catch-fail((if success?(2-proj-3-tuple(v_188)) then (if (not-caught-fail(v_213) && success?(is-true(success?(1-proj-3-tuple(v_213))))) then (if (not-caught-fail(v_219) && success?(is-true(success?(1-proj-3-tuple(v_219))))) then (if not-caught-fail(v_221) then (v_221,2-proj-3-tuple(v_219),3-proj-3-tuple(v_219)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {281}let v_223: key = catch-fail(2-proj-3-tuple(v_222)) in
        {282}let v_224: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_187))) in
        {283}let v_225: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_222))) in
        {284}let v_226: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_225),(if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_224) && success?(is-true(success?(1-proj-2-tuple(v_224))))) then dhexp(2-proj-2-tuple(v_224),v_223) else fail-any) else fail-any))) in
        {285}let v_227: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_225),(if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_224) && success?(is-true(success?(1-proj-2-tuple(v_224))))) then dhexp(2-proj-2-tuple(v_224),v_223) else fail-any) else fail-any))) in
        {286}let v_228: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_225),(if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_224) && success?(is-true(success?(1-proj-2-tuple(v_224))))) then dhexp(2-proj-2-tuple(v_224),v_223) else fail-any) else fail-any))) in
        {287}let v_229: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_224) && success?(is-true(success?(1-proj-2-tuple(v_224))))) then dhexp(2-proj-2-tuple(v_224),v_223) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_225))) then (if not-caught-fail(v_226) then (if not-caught-fail(v_227) then (if not-caught-fail(v_228) then (v_226,v_227,v_228) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_230: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_187)) then (if (not-caught-fail(v_224) && success?(is-true(success?(1-proj-2-tuple(v_224))))) then dhexp(2-proj-2-tuple(v_224),v_223) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_222))) then (if (not-caught-fail(v_225) && success?(is-true(success?(1-proj-3-tuple(v_225))))) then (if (not-caught-fail(v_229) && success?(is-true(success?(1-proj-3-tuple(v_229))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_229)) then cipherstatepack(2-proj-3-tuple(v_229),minnonce) else fail-any),1-proj-3-tuple(v_229),3-proj-3-tuple(v_225)) else fail-any) else fail-any) else fail-any)) in
        {289}let v_231: bitstring = catch-fail(symmetricstateunpack(v_230)) in
        {290}let v_232: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_231))) in
        {291}let v_233: aead = catch-fail(decrypt(1-proj-2-tuple(v_232),2-proj-2-tuple(v_232),3-proj-3-tuple(v_231),3-proj-3-tuple(v_188))) in
        {292}let v_234: bitstring = catch-fail(aeadunpack(v_233)) in
        {293}let v_235: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_231))) in
        {294}let v_236: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_232))) && success?(1-proj-3-tuple(v_231))) then (if (not-caught-fail(v_235) && success?(is-true(success?(1-proj-2-tuple(v_235))))) then cipherstatepack(1-proj-2-tuple(v_235),increment_nonce(2-proj-2-tuple(v_232))) else fail-any) else fail-any)) in
        {295}let v_237: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_188)) && (success?(3-proj-3-tuple(v_231)) && success?(1-proj-3-tuple(v_231)))) then (if (not-caught-fail(v_232) && success?(is-true(success?(1-proj-2-tuple(v_232))))) then (if not-caught-fail(v_233) then (if (not-caught-fail(v_234) && success?(is-true(success?(1-proj-3-tuple(v_234))))) then (if not-caught-fail(v_236) then (v_236,3-proj-3-tuple(v_234),1-proj-3-tuple(v_234)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_238: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_237),2-proj-3-tuple(v_231),3-proj-3-tuple(v_231)))) in
        {297}let v_239: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_188)) && success?(symmetricstatepack(1-proj-3-tuple(v_237),2-proj-3-tuple(v_231),3-proj-3-tuple(v_231)))) then (if (not-caught-fail(v_238) && success?(is-true(success?(1-proj-3-tuple(v_238))))) then symmetricstatepack(1-proj-3-tuple(v_238),2-proj-3-tuple(v_238),hash(3-proj-3-tuple(v_238),3-proj-3-tuple(v_188))) else fail-any) else fail-any)) in
        {298}let v_240: bitstring = catch-fail((if success?(3-proj-3-tuple(v_188)) then (if (not-caught-fail(v_231) && success?(is-true(success?(1-proj-3-tuple(v_231))))) then (if (not-caught-fail(v_237) && success?(is-true(success?(1-proj-3-tuple(v_237))))) then (if not-caught-fail(v_239) then (v_239,2-proj-3-tuple(v_237),3-proj-3-tuple(v_237)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {299}let v_241: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {300}let v_242: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_240),2-proj-7-tuple(v_187),3-proj-7-tuple(v_187),v_223,v_190,6-proj-7-tuple(v_187),7-proj-7-tuple(v_187))) in
        {301}let v_243: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_240))) in
        {302}let v_244: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_243),zero)) in
        {303}let v_245: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_243),zero)) in
        {304}let v_246: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_243),zero)) in
        {305}let v_247: bitstring = catch-fail((if success?(2-proj-3-tuple(v_243)) then (if not-caught-fail(v_244) then (if not-caught-fail(v_245) then (if not-caught-fail(v_246) then (v_244,v_245,v_246) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_248: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_247)) then cipherstatepack(1-proj-3-tuple(v_247),minnonce) else fail-any)) in
        {307}let v_249: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_247)) then cipherstatepack(2-proj-3-tuple(v_247),minnonce) else fail-any)) in
        {308}let v_250: bitstring = catch-fail((if success?(1-proj-3-tuple(v_240)) then (if (not-caught-fail(v_243) && success?(is-true(success?(1-proj-3-tuple(v_243))))) then (if (not-caught-fail(v_247) && success?(is-true(success?(1-proj-3-tuple(v_247))))) then (if not-caught-fail(v_248) then (if not-caught-fail(v_249) then (1-proj-3-tuple(v_240),v_248,v_249) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {309}let (hs_15: handshakestate,plaintext_b_1: bitstring,valid_2: bool,cs1_3: cipherstate,cs2_3: cipherstate) = (if (not-caught-fail(v_187) && success?(is-true(success?(1-proj-7-tuple(v_187))))) then (if (not-caught-fail(v_188) && success?(is-true(success?(1-proj-3-tuple(v_188))))) then (if not-caught-fail(v_189) then (if not-caught-fail(v_190) then (if not-caught-fail(v_192) then (if not-caught-fail(v_198) then (if not-caught-fail(v_205) then (if not-caught-fail(v_212) then (if (not-caught-fail(v_222) && success?(is-true(success?(1-proj-3-tuple(v_222))))) then (if not-caught-fail(v_223) then (if not-caught-fail(v_230) then (if (not-caught-fail(v_240) && success?(is-true(success?(1-proj-3-tuple(v_240))))) then (if ((3-proj-3-tuple(v_222) && 3-proj-3-tuple(v_240)) && (v_223 = getpublickey((if not-caught-fail(v_241) then keypairpack(validkey(v_241),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_242) then (if (not-caught-fail(v_250) && success?(is-true(success?(1-proj-3-tuple(v_250))))) then (v_242,2-proj-3-tuple(v_240),true,2-proj-3-tuple(v_250),3-proj-3-tuple(v_250)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {310}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_1);
        {311}insert statestore(alice,charlie,sid,statepack_c(hs_15,cs1_3,cs2_3))
    ) | (
        {313}!
        {332}get statestore(=alice,=charlie,=sid,statepack_c(hs_16: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {314}let hs_17: handshakestate = handshakestatesetcs(hs_16,cs1_4) in
        {315}let v_251: bitstring = catch-fail(handshakestateunpack(hs_17)) in
        {316}let v_252: bitstring = catch-fail((empty,empty,empty)) in
        {317}let v_253: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_251))) in
        {318}let v_254: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_253))) in
        {319}let v_255: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_254),2-proj-2-tuple(v_254),3-proj-3-tuple(v_253),msg_c(alice,charlie,sid))) in
        {320}let v_256: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_253))) in
        {321}let v_257: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_254))) && success?(1-proj-3-tuple(v_253))) then (if (not-caught-fail(v_256) && success?(is-true(success?(1-proj-2-tuple(v_256))))) then cipherstatepack(1-proj-2-tuple(v_256),increment_nonce(2-proj-2-tuple(v_254))) else fail-any) else fail-any)) in
        {322}let v_258: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_253)) && success?(1-proj-3-tuple(v_253))) then (if (not-caught-fail(v_254) && success?(is-true(success?(1-proj-2-tuple(v_254))))) then (if not-caught-fail(v_255) then (if not-caught-fail(v_257) then (v_257,v_255) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {323}let v_259: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_258),2-proj-3-tuple(v_253),3-proj-3-tuple(v_253)))) in
        {324}let v_260: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_258)) && success?(symmetricstatepack(1-proj-2-tuple(v_258),2-proj-3-tuple(v_253),3-proj-3-tuple(v_253)))) then (if (not-caught-fail(v_259) && success?(is-true(success?(1-proj-3-tuple(v_259))))) then symmetricstatepack(1-proj-3-tuple(v_259),2-proj-3-tuple(v_259),hash(3-proj-3-tuple(v_259),2-proj-2-tuple(v_258))) else fail-any) else fail-any)) in
        {325}let v_261: bitstring = catch-fail((if success?(1-proj-7-tuple(v_251)) then (if (not-caught-fail(v_253) && success?(is-true(success?(1-proj-3-tuple(v_253))))) then (if (not-caught-fail(v_258) && success?(is-true(success?(1-proj-2-tuple(v_258))))) then (if not-caught-fail(v_260) then (v_260,2-proj-2-tuple(v_258)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {326}let v_262: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_261),2-proj-7-tuple(v_251),3-proj-7-tuple(v_251),4-proj-7-tuple(v_251),5-proj-7-tuple(v_251),6-proj-7-tuple(v_251),7-proj-7-tuple(v_251))) in
        {327}let v_263: bitstring = catch-fail(concat3(1-proj-3-tuple(v_252),2-proj-3-tuple(v_252),2-proj-2-tuple(v_261))) in
        {328}let (hs_18: handshakestate,message_c_1: bitstring) = (if (not-caught-fail(v_251) && success?(is-true(success?(1-proj-7-tuple(v_251))))) then (if (not-caught-fail(v_252) && success?(is-true(success?(1-proj-3-tuple(v_252))))) then (if (not-caught-fail(v_261) && success?(is-true(success?(1-proj-2-tuple(v_261))))) then (if not-caught-fail(v_262) then (if not-caught-fail(v_263) then (v_262,v_263) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {329}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {330}insert statestore(alice,charlie,sid,statepack_d(hs_18,handshakestategetcs(hs_18),cs2_4));
        {331}out(pub, message_c_1)
    ) | (
        {333}!
        {353}get statestore(=alice,=charlie,=sid,statepack_d(hs_19: handshakestate,cs1_5: cipherstate,cs2_5: cipherstate)) in
        {334}let hs_20: handshakestate = handshakestatesetcs(hs_19,cs2_5) in
        {335}in(pub, message_d_1: bitstring);
        {336}let v_264: bitstring = catch-fail(handshakestateunpack(hs_20)) in
        {337}let v_265: bitstring = catch-fail(deconcat3(message_d_1)) in
        {338}let v_266: bool = catch-fail(true) in
        {339}let v_267: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_264))) in
        {340}let v_268: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_267))) in
        {341}let v_269: aead = catch-fail(decrypt(1-proj-2-tuple(v_268),2-proj-2-tuple(v_268),3-proj-3-tuple(v_267),3-proj-3-tuple(v_265))) in
        {342}let v_270: bitstring = catch-fail(aeadunpack(v_269)) in
        {343}let v_271: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_267))) in
        {344}let v_272: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_268))) && success?(1-proj-3-tuple(v_267))) then (if (not-caught-fail(v_271) && success?(is-true(success?(1-proj-2-tuple(v_271))))) then cipherstatepack(1-proj-2-tuple(v_271),increment_nonce(2-proj-2-tuple(v_268))) else fail-any) else fail-any)) in
        {345}let v_273: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_265)) && (success?(3-proj-3-tuple(v_267)) && success?(1-proj-3-tuple(v_267)))) then (if (not-caught-fail(v_268) && success?(is-true(success?(1-proj-2-tuple(v_268))))) then (if not-caught-fail(v_269) then (if (not-caught-fail(v_270) && success?(is-true(success?(1-proj-3-tuple(v_270))))) then (if not-caught-fail(v_272) then (v_272,3-proj-3-tuple(v_270),1-proj-3-tuple(v_270)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {346}let v_274: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_273),2-proj-3-tuple(v_267),3-proj-3-tuple(v_267)))) in
        {347}let v_275: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_265)) && success?(symmetricstatepack(1-proj-3-tuple(v_273),2-proj-3-tuple(v_267),3-proj-3-tuple(v_267)))) then (if (not-caught-fail(v_274) && success?(is-true(success?(1-proj-3-tuple(v_274))))) then symmetricstatepack(1-proj-3-tuple(v_274),2-proj-3-tuple(v_274),hash(3-proj-3-tuple(v_274),3-proj-3-tuple(v_265))) else fail-any) else fail-any)) in
        {348}let v_276: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_265)) && success?(1-proj-7-tuple(v_264))) then (if (not-caught-fail(v_267) && success?(is-true(success?(1-proj-3-tuple(v_267))))) then (if (not-caught-fail(v_273) && success?(is-true(success?(1-proj-3-tuple(v_273))))) then (if not-caught-fail(v_275) then (v_275,2-proj-3-tuple(v_273),3-proj-3-tuple(v_273)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {349}let v_277: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_276),2-proj-7-tuple(v_264),3-proj-7-tuple(v_264),4-proj-7-tuple(v_264),5-proj-7-tuple(v_264),6-proj-7-tuple(v_264),7-proj-7-tuple(v_264))) in
        {350}let (hs_21: handshakestate,plaintext_d_1: bitstring,valid_3: bool) = (if (not-caught-fail(v_264) && success?(is-true(success?(1-proj-7-tuple(v_264))))) then (if (not-caught-fail(v_265) && success?(is-true(success?(1-proj-3-tuple(v_265))))) then (if not-caught-fail(v_266) then (if (not-caught-fail(v_276) && success?(is-true(success?(1-proj-3-tuple(v_276))))) then (if (v_266 && 3-proj-3-tuple(v_276)) then (if not-caught-fail(v_277) then (v_277,2-proj-3-tuple(v_276),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {351}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_1);
        {352}event RecvEnd(valid_3)
    ) | (
        {354}event LeakPsk(phase0,alice,charlie);
        {355}out(pub, key_psk(alice,charlie))
    ) | (
        {356}phase 1;
        {357}event LeakPsk(phase1,alice,charlie);
        {358}out(pub, key_psk(alice,charlie))
    ) | (
        {359}event LeakS(phase0,alice);
        {360}out(pub, key_s(alice))
    ) | (
        {361}phase 1;
        {362}event LeakS(phase1,alice);
        {363}out(pub, key_s(alice))
    )
) | (
    {364}let s_2: keypair = keypairpack(empty,empty) in
    {365}out(pub, getpublickey(s_2));
    (
        {366}let e_2: keypair = keypairpack(empty,empty) in
        {367}let rs_2: key = empty in
        {368}let re_2: key = empty in
        {369}let v_278: bitstring = catch-fail(hash(somename,empty)) in
        {370}let v_279: key = catch-fail(v_278) in
        {371}let v_280: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {372}let v_281: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_278) then (if not-caught-fail(v_279) then (if not-caught-fail(v_280) then symmetricstatepack(v_280,v_279,v_278) else fail-any) else fail-any) else fail-any))) in
        {373}let v_282: symmetricstate = catch-fail((if success?((if not-caught-fail(v_278) then (if not-caught-fail(v_279) then (if not-caught-fail(v_280) then symmetricstatepack(v_280,v_279,v_278) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_281) && success?(is-true(success?(1-proj-3-tuple(v_281))))) then symmetricstatepack(1-proj-3-tuple(v_281),2-proj-3-tuple(v_281),hash(3-proj-3-tuple(v_281),empty)) else fail-any) else fail-any)) in
        {374}let hs_22: handshakestate = (if not-caught-fail(v_282) then handshakestatepack(v_282,s_2,e_2,rs_2,re_2,key_psk(alice,bob),false) else fail-any) in
        {375}insert statestore(bob,alice,sid,statepack_a(hs_22))
    ) | (
        {423}get statestore(=bob,=alice,=sid,statepack_a(hs_23: handshakestate)) in
        {376}in(pub, message_a_2: bitstring);
        {377}let v_283: bitstring = catch-fail(handshakestateunpack(hs_23)) in
        {378}let v_284: bitstring = catch-fail(deconcat3(message_a_2)) in
        {379}let v_285: bool = catch-fail(true) in
        {380}let v_286: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_283))) in
        {381}let v_287: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_286),6-proj-7-tuple(v_283))) in
        {382}let v_288: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_286),6-proj-7-tuple(v_283))) in
        {383}let v_289: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_286),6-proj-7-tuple(v_283))) in
        {384}let v_290: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_283)) && success?(2-proj-3-tuple(v_286))) then (if not-caught-fail(v_287) then (if not-caught-fail(v_288) then (if not-caught-fail(v_289) then (v_287,v_288,v_289) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {385}let v_291: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_286),1-proj-3-tuple(v_290),3-proj-3-tuple(v_286)))) in
        {386}let v_292: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_290)) && success?(symmetricstatepack(1-proj-3-tuple(v_286),1-proj-3-tuple(v_290),3-proj-3-tuple(v_286)))) then (if (not-caught-fail(v_291) && success?(is-true(success?(1-proj-3-tuple(v_291))))) then symmetricstatepack(1-proj-3-tuple(v_291),2-proj-3-tuple(v_291),hash(3-proj-3-tuple(v_291),2-proj-3-tuple(v_290))) else fail-any) else fail-any))) in
        {387}let v_293: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_283)) && success?(1-proj-7-tuple(v_283))) then (if (not-caught-fail(v_286) && success?(is-true(success?(1-proj-3-tuple(v_286))))) then (if (not-caught-fail(v_290) && success?(is-true(success?(1-proj-3-tuple(v_290))))) then (if (not-caught-fail(v_292) && success?(is-true(success?(1-proj-3-tuple(v_292))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_290)) then cipherstatepack(3-proj-3-tuple(v_290),minnonce) else fail-any),1-proj-3-tuple(v_290),3-proj-3-tuple(v_292)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {388}let v_294: key = catch-fail(1-proj-3-tuple(v_284)) in
        {389}let v_295: bitstring = catch-fail(symmetricstateunpack(v_293)) in
        {390}let v_296: symmetricstate = catch-fail((if (not-caught-fail(v_295) && success?(is-true(success?(1-proj-3-tuple(v_295))))) then symmetricstatepack(1-proj-3-tuple(v_295),2-proj-3-tuple(v_295),hash(3-proj-3-tuple(v_295),v_294)) else fail-any)) in
        {391}let v_297: bitstring = catch-fail(symmetricstateunpack(v_296)) in
        {392}let v_298: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_297),v_294)) in
        {393}let v_299: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_297),v_294)) in
        {394}let v_300: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_297),v_294)) in
        {395}let v_301: bitstring = catch-fail((if success?(2-proj-3-tuple(v_297)) then (if not-caught-fail(v_298) then (if not-caught-fail(v_299) then (if not-caught-fail(v_300) then (v_298,v_299,v_300) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {396}let v_302: symmetricstate = catch-fail((if (not-caught-fail(v_297) && success?(is-true(success?(1-proj-3-tuple(v_297))))) then (if (not-caught-fail(v_301) && success?(is-true(success?(1-proj-3-tuple(v_301))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_301)) then cipherstatepack(2-proj-3-tuple(v_301),minnonce) else fail-any),1-proj-3-tuple(v_301),3-proj-3-tuple(v_297)) else fail-any) else fail-any)) in
        {397}let v_303: bitstring = catch-fail(symmetricstateunpack(v_302)) in
        {398}let v_304: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_303))) in
        {399}let v_305: aead = catch-fail(decrypt(1-proj-2-tuple(v_304),2-proj-2-tuple(v_304),3-proj-3-tuple(v_303),2-proj-3-tuple(v_284))) in
        {400}let v_306: bitstring = catch-fail(aeadunpack(v_305)) in
        {401}let v_307: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_303))) in
        {402}let v_308: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_304))) && success?(1-proj-3-tuple(v_303))) then (if (not-caught-fail(v_307) && success?(is-true(success?(1-proj-2-tuple(v_307))))) then cipherstatepack(1-proj-2-tuple(v_307),increment_nonce(2-proj-2-tuple(v_304))) else fail-any) else fail-any)) in
        {403}let v_309: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_284)) && (success?(3-proj-3-tuple(v_303)) && success?(1-proj-3-tuple(v_303)))) then (if (not-caught-fail(v_304) && success?(is-true(success?(1-proj-2-tuple(v_304))))) then (if not-caught-fail(v_305) then (if (not-caught-fail(v_306) && success?(is-true(success?(1-proj-3-tuple(v_306))))) then (if not-caught-fail(v_308) then (v_308,3-proj-3-tuple(v_306),1-proj-3-tuple(v_306)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {404}let v_310: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_309),2-proj-3-tuple(v_303),3-proj-3-tuple(v_303)))) in
        {405}let v_311: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_284)) && success?(symmetricstatepack(1-proj-3-tuple(v_309),2-proj-3-tuple(v_303),3-proj-3-tuple(v_303)))) then (if (not-caught-fail(v_310) && success?(is-true(success?(1-proj-3-tuple(v_310))))) then symmetricstatepack(1-proj-3-tuple(v_310),2-proj-3-tuple(v_310),hash(3-proj-3-tuple(v_310),2-proj-3-tuple(v_284))) else fail-any) else fail-any)) in
        {406}let v_312: bitstring = catch-fail((if success?(2-proj-3-tuple(v_284)) then (if (not-caught-fail(v_303) && success?(is-true(success?(1-proj-3-tuple(v_303))))) then (if (not-caught-fail(v_309) && success?(is-true(success?(1-proj-3-tuple(v_309))))) then (if not-caught-fail(v_311) then (v_311,2-proj-3-tuple(v_309),3-proj-3-tuple(v_309)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_313: key = catch-fail(2-proj-3-tuple(v_312)) in
        {408}let v_314: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_312))) in
        {409}let v_315: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_314))) in
        {410}let v_316: aead = catch-fail(decrypt(1-proj-2-tuple(v_315),2-proj-2-tuple(v_315),3-proj-3-tuple(v_314),3-proj-3-tuple(v_284))) in
        {411}let v_317: bitstring = catch-fail(aeadunpack(v_316)) in
        {412}let v_318: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_314))) in
        {413}let v_319: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_315))) && success?(1-proj-3-tuple(v_314))) then (if (not-caught-fail(v_318) && success?(is-true(success?(1-proj-2-tuple(v_318))))) then cipherstatepack(1-proj-2-tuple(v_318),increment_nonce(2-proj-2-tuple(v_315))) else fail-any) else fail-any)) in
        {414}let v_320: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_284)) && (success?(3-proj-3-tuple(v_314)) && success?(1-proj-3-tuple(v_314)))) then (if (not-caught-fail(v_315) && success?(is-true(success?(1-proj-2-tuple(v_315))))) then (if not-caught-fail(v_316) then (if (not-caught-fail(v_317) && success?(is-true(success?(1-proj-3-tuple(v_317))))) then (if not-caught-fail(v_319) then (v_319,3-proj-3-tuple(v_317),1-proj-3-tuple(v_317)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {415}let v_321: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_320),2-proj-3-tuple(v_314),3-proj-3-tuple(v_314)))) in
        {416}let v_322: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_284)) && success?(symmetricstatepack(1-proj-3-tuple(v_320),2-proj-3-tuple(v_314),3-proj-3-tuple(v_314)))) then (if (not-caught-fail(v_321) && success?(is-true(success?(1-proj-3-tuple(v_321))))) then symmetricstatepack(1-proj-3-tuple(v_321),2-proj-3-tuple(v_321),hash(3-proj-3-tuple(v_321),3-proj-3-tuple(v_284))) else fail-any) else fail-any)) in
        {417}let v_323: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_284)) && success?(1-proj-3-tuple(v_312))) then (if (not-caught-fail(v_314) && success?(is-true(success?(1-proj-3-tuple(v_314))))) then (if (not-caught-fail(v_320) && success?(is-true(success?(1-proj-3-tuple(v_320))))) then (if not-caught-fail(v_322) then (v_322,2-proj-3-tuple(v_320),3-proj-3-tuple(v_320)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_324: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {419}let v_325: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_323),2-proj-7-tuple(v_283),3-proj-7-tuple(v_283),v_313,v_294,6-proj-7-tuple(v_283),7-proj-7-tuple(v_283))) in
        {420}let (hs_24: handshakestate,plaintext_a: bitstring,valid_4: bool) = (if (not-caught-fail(v_283) && success?(is-true(success?(1-proj-7-tuple(v_283))))) then (if (not-caught-fail(v_284) && success?(is-true(success?(1-proj-3-tuple(v_284))))) then (if not-caught-fail(v_285) then (if not-caught-fail(v_293) then (if not-caught-fail(v_294) then (if not-caught-fail(v_296) then (if not-caught-fail(v_302) then (if (not-caught-fail(v_312) && success?(is-true(success?(1-proj-3-tuple(v_312))))) then (if not-caught-fail(v_313) then (if (not-caught-fail(v_323) && success?(is-true(success?(1-proj-3-tuple(v_323))))) then (if ((3-proj-3-tuple(v_312) && 3-proj-3-tuple(v_323)) && (v_313 = getpublickey((if not-caught-fail(v_324) then keypairpack(validkey(v_324),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_325) then (v_325,2-proj-3-tuple(v_323),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {421}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {422}insert statestore(bob,alice,sid,statepack_b(hs_24))
    ) | (
        {492}get statestore(=bob,=alice,=sid,statepack_b(hs_25: handshakestate)) in
        {424}let v_326: bitstring = catch-fail(handshakestateunpack(hs_25)) in
        {425}let v_327: bitstring = catch-fail((empty,empty,empty)) in
        {426}let v_328: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {427}let v_329: keypair = catch-fail((if not-caught-fail(v_328) then keypairpack(validkey(v_328),key_e(bob,alice,sid)) else fail-any)) in
        {428}let v_330: bitstring = catch-fail(getpublickey(v_329)) in
        {429}let v_331: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_326))) in
        {430}let v_332: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_326)) then (if (not-caught-fail(v_331) && success?(is-true(success?(1-proj-3-tuple(v_331))))) then symmetricstatepack(1-proj-3-tuple(v_331),2-proj-3-tuple(v_331),hash(3-proj-3-tuple(v_331),v_330)) else fail-any) else fail-any)) in
        {431}let v_333: bitstring = catch-fail(symmetricstateunpack(v_332)) in
        {432}let v_334: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_333),getpublickey(v_329))) in
        {433}let v_335: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_333),getpublickey(v_329))) in
        {434}let v_336: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_333),getpublickey(v_329))) in
        {435}let v_337: bitstring = catch-fail((if (success?(getpublickey(v_329)) && success?(2-proj-3-tuple(v_333))) then (if not-caught-fail(v_334) then (if not-caught-fail(v_335) then (if not-caught-fail(v_336) then (v_334,v_335,v_336) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_338: symmetricstate = catch-fail((if success?(getpublickey(v_329)) then (if (not-caught-fail(v_333) && success?(is-true(success?(1-proj-3-tuple(v_333))))) then (if (not-caught-fail(v_337) && success?(is-true(success?(1-proj-3-tuple(v_337))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_337)) then cipherstatepack(2-proj-3-tuple(v_337),minnonce) else fail-any),1-proj-3-tuple(v_337),3-proj-3-tuple(v_333)) else fail-any) else fail-any) else fail-any)) in
        {437}let v_339: bitstring = catch-fail(keypairunpack(v_329)) in
        {438}let v_340: bitstring = catch-fail(symmetricstateunpack(v_338)) in
        {439}let v_341: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_340),(if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_339) && success?(is-true(success?(1-proj-2-tuple(v_339))))) then dhexp(2-proj-2-tuple(v_339),5-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {440}let v_342: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_340),(if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_339) && success?(is-true(success?(1-proj-2-tuple(v_339))))) then dhexp(2-proj-2-tuple(v_339),5-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {441}let v_343: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_340),(if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_339) && success?(is-true(success?(1-proj-2-tuple(v_339))))) then dhexp(2-proj-2-tuple(v_339),5-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {442}let v_344: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_339) && success?(is-true(success?(1-proj-2-tuple(v_339))))) then dhexp(2-proj-2-tuple(v_339),5-proj-7-tuple(v_326)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_340))) then (if not-caught-fail(v_341) then (if not-caught-fail(v_342) then (if not-caught-fail(v_343) then (v_341,v_342,v_343) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_345: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_339) && success?(is-true(success?(1-proj-2-tuple(v_339))))) then dhexp(2-proj-2-tuple(v_339),5-proj-7-tuple(v_326)) else fail-any) else fail-any)) then (if (not-caught-fail(v_340) && success?(is-true(success?(1-proj-3-tuple(v_340))))) then (if (not-caught-fail(v_344) && success?(is-true(success?(1-proj-3-tuple(v_344))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_344)) then cipherstatepack(2-proj-3-tuple(v_344),minnonce) else fail-any),1-proj-3-tuple(v_344),3-proj-3-tuple(v_340)) else fail-any) else fail-any) else fail-any)) in
        {444}let v_346: bitstring = catch-fail(keypairunpack(v_329)) in
        {445}let v_347: bitstring = catch-fail(symmetricstateunpack(v_345)) in
        {446}let v_348: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_347),(if success?(4-proj-7-tuple(v_326)) then (if (not-caught-fail(v_346) && success?(is-true(success?(1-proj-2-tuple(v_346))))) then dhexp(2-proj-2-tuple(v_346),4-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {447}let v_349: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_347),(if success?(4-proj-7-tuple(v_326)) then (if (not-caught-fail(v_346) && success?(is-true(success?(1-proj-2-tuple(v_346))))) then dhexp(2-proj-2-tuple(v_346),4-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {448}let v_350: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_347),(if success?(4-proj-7-tuple(v_326)) then (if (not-caught-fail(v_346) && success?(is-true(success?(1-proj-2-tuple(v_346))))) then dhexp(2-proj-2-tuple(v_346),4-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {449}let v_351: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_326)) then (if (not-caught-fail(v_346) && success?(is-true(success?(1-proj-2-tuple(v_346))))) then dhexp(2-proj-2-tuple(v_346),4-proj-7-tuple(v_326)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_347))) then (if not-caught-fail(v_348) then (if not-caught-fail(v_349) then (if not-caught-fail(v_350) then (v_348,v_349,v_350) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_352: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_326)) then (if (not-caught-fail(v_346) && success?(is-true(success?(1-proj-2-tuple(v_346))))) then dhexp(2-proj-2-tuple(v_346),4-proj-7-tuple(v_326)) else fail-any) else fail-any)) then (if (not-caught-fail(v_347) && success?(is-true(success?(1-proj-3-tuple(v_347))))) then (if (not-caught-fail(v_351) && success?(is-true(success?(1-proj-3-tuple(v_351))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_351)) then cipherstatepack(2-proj-3-tuple(v_351),minnonce) else fail-any),1-proj-3-tuple(v_351),3-proj-3-tuple(v_347)) else fail-any) else fail-any) else fail-any)) in
        {451}let v_353: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {452}let v_354: keypair = catch-fail((if not-caught-fail(v_353) then keypairpack(validkey(v_353),key_s(bob)) else fail-any)) in
        {453}let v_355: bitstring = catch-fail(symmetricstateunpack(v_352)) in
        {454}let v_356: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_355))) in
        {455}let v_357: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_356),2-proj-2-tuple(v_356),3-proj-3-tuple(v_355),getpublickey(v_354))) in
        {456}let v_358: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_355))) in
        {457}let v_359: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_356))) && success?(1-proj-3-tuple(v_355))) then (if (not-caught-fail(v_358) && success?(is-true(success?(1-proj-2-tuple(v_358))))) then cipherstatepack(1-proj-2-tuple(v_358),increment_nonce(2-proj-2-tuple(v_356))) else fail-any) else fail-any)) in
        {458}let v_360: bitstring = catch-fail((if (success?(getpublickey(v_354)) && (success?(3-proj-3-tuple(v_355)) && success?(1-proj-3-tuple(v_355)))) then (if (not-caught-fail(v_356) && success?(is-true(success?(1-proj-2-tuple(v_356))))) then (if not-caught-fail(v_357) then (if not-caught-fail(v_359) then (v_359,v_357) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_361: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_360),2-proj-3-tuple(v_355),3-proj-3-tuple(v_355)))) in
        {460}let v_362: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_360)) && success?(symmetricstatepack(1-proj-2-tuple(v_360),2-proj-3-tuple(v_355),3-proj-3-tuple(v_355)))) then (if (not-caught-fail(v_361) && success?(is-true(success?(1-proj-3-tuple(v_361))))) then symmetricstatepack(1-proj-3-tuple(v_361),2-proj-3-tuple(v_361),hash(3-proj-3-tuple(v_361),2-proj-2-tuple(v_360))) else fail-any) else fail-any)) in
        {461}let v_363: bitstring = catch-fail((if success?(getpublickey(v_354)) then (if (not-caught-fail(v_355) && success?(is-true(success?(1-proj-3-tuple(v_355))))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then (if not-caught-fail(v_362) then (v_362,2-proj-2-tuple(v_360)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {462}let v_364: bitstring = catch-fail(keypairunpack(v_354)) in
        {463}let v_365: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_363))) in
        {464}let v_366: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_365),(if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_364) && success?(is-true(success?(1-proj-2-tuple(v_364))))) then dhexp(2-proj-2-tuple(v_364),5-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {465}let v_367: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_365),(if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_364) && success?(is-true(success?(1-proj-2-tuple(v_364))))) then dhexp(2-proj-2-tuple(v_364),5-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {466}let v_368: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_365),(if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_364) && success?(is-true(success?(1-proj-2-tuple(v_364))))) then dhexp(2-proj-2-tuple(v_364),5-proj-7-tuple(v_326)) else fail-any) else fail-any))) in
        {467}let v_369: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_364) && success?(is-true(success?(1-proj-2-tuple(v_364))))) then dhexp(2-proj-2-tuple(v_364),5-proj-7-tuple(v_326)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_365))) then (if not-caught-fail(v_366) then (if not-caught-fail(v_367) then (if not-caught-fail(v_368) then (v_366,v_367,v_368) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {468}let v_370: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_326)) then (if (not-caught-fail(v_364) && success?(is-true(success?(1-proj-2-tuple(v_364))))) then dhexp(2-proj-2-tuple(v_364),5-proj-7-tuple(v_326)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_363))) then (if (not-caught-fail(v_365) && success?(is-true(success?(1-proj-3-tuple(v_365))))) then (if (not-caught-fail(v_369) && success?(is-true(success?(1-proj-3-tuple(v_369))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_369)) then cipherstatepack(2-proj-3-tuple(v_369),minnonce) else fail-any),1-proj-3-tuple(v_369),3-proj-3-tuple(v_365)) else fail-any) else fail-any) else fail-any)) in
        {469}let v_371: bitstring = catch-fail(symmetricstateunpack(v_370)) in
        {470}let v_372: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_371))) in
        {471}let v_373: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_372),2-proj-2-tuple(v_372),3-proj-3-tuple(v_371),msg_b(bob,alice,sid))) in
        {472}let v_374: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_371))) in
        {473}let v_375: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_372))) && success?(1-proj-3-tuple(v_371))) then (if (not-caught-fail(v_374) && success?(is-true(success?(1-proj-2-tuple(v_374))))) then cipherstatepack(1-proj-2-tuple(v_374),increment_nonce(2-proj-2-tuple(v_372))) else fail-any) else fail-any)) in
        {474}let v_376: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_371)) && success?(1-proj-3-tuple(v_371))) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then (if not-caught-fail(v_373) then (if not-caught-fail(v_375) then (v_375,v_373) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {475}let v_377: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_376),2-proj-3-tuple(v_371),3-proj-3-tuple(v_371)))) in
        {476}let v_378: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_376)) && success?(symmetricstatepack(1-proj-2-tuple(v_376),2-proj-3-tuple(v_371),3-proj-3-tuple(v_371)))) then (if (not-caught-fail(v_377) && success?(is-true(success?(1-proj-3-tuple(v_377))))) then symmetricstatepack(1-proj-3-tuple(v_377),2-proj-3-tuple(v_377),hash(3-proj-3-tuple(v_377),2-proj-2-tuple(v_376))) else fail-any) else fail-any)) in
        {477}let v_379: bitstring = catch-fail((if (not-caught-fail(v_371) && success?(is-true(success?(1-proj-3-tuple(v_371))))) then (if (not-caught-fail(v_376) && success?(is-true(success?(1-proj-2-tuple(v_376))))) then (if not-caught-fail(v_378) then (v_378,2-proj-2-tuple(v_376)) else fail-any) else fail-any) else fail-any)) in
        {478}let v_380: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_379),v_354,v_329,4-proj-7-tuple(v_326),5-proj-7-tuple(v_326),6-proj-7-tuple(v_326),7-proj-7-tuple(v_326))) in
        {479}let v_381: bitstring = catch-fail(concat3(v_330,2-proj-2-tuple(v_363),2-proj-2-tuple(v_379))) in
        {480}let v_382: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_379))) in
        {481}let v_383: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_382),zero)) in
        {482}let v_384: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_382),zero)) in
        {483}let v_385: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_382),zero)) in
        {484}let v_386: bitstring = catch-fail((if success?(2-proj-3-tuple(v_382)) then (if not-caught-fail(v_383) then (if not-caught-fail(v_384) then (if not-caught-fail(v_385) then (v_383,v_384,v_385) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_387: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_386)) then cipherstatepack(1-proj-3-tuple(v_386),minnonce) else fail-any)) in
        {486}let v_388: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_386)) then cipherstatepack(2-proj-3-tuple(v_386),minnonce) else fail-any)) in
        {487}let v_389: bitstring = catch-fail((if success?(1-proj-2-tuple(v_379)) then (if (not-caught-fail(v_382) && success?(is-true(success?(1-proj-3-tuple(v_382))))) then (if (not-caught-fail(v_386) && success?(is-true(success?(1-proj-3-tuple(v_386))))) then (if not-caught-fail(v_387) then (if not-caught-fail(v_388) then (1-proj-2-tuple(v_379),v_387,v_388) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {488}let (hs_26: handshakestate,message_b_2: bitstring,cs1_6: cipherstate,cs2_6: cipherstate) = (if (not-caught-fail(v_326) && success?(is-true(success?(1-proj-7-tuple(v_326))))) then (if (not-caught-fail(v_327) && success?(is-true(success?(1-proj-3-tuple(v_327))))) then (if not-caught-fail(v_329) then (if not-caught-fail(v_330) then (if not-caught-fail(v_332) then (if not-caught-fail(v_338) then (if not-caught-fail(v_345) then (if not-caught-fail(v_352) then (if not-caught-fail(v_354) then (if (not-caught-fail(v_363) && success?(is-true(success?(1-proj-2-tuple(v_363))))) then (if not-caught-fail(v_370) then (if (not-caught-fail(v_379) && success?(is-true(success?(1-proj-2-tuple(v_379))))) then (if not-caught-fail(v_380) then (if not-caught-fail(v_381) then (if (not-caught-fail(v_389) && success?(is-true(success?(1-proj-3-tuple(v_389))))) then (v_380,v_381,2-proj-3-tuple(v_389),3-proj-3-tuple(v_389)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {489}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {490}insert statestore(bob,alice,sid,statepack_c(hs_26,cs1_6,cs2_6));
        {491}out(pub, message_b_2)
    ) | (
        {493}!
        {513}get statestore(=bob,=alice,=sid,statepack_c(hs_27: handshakestate,cs1_7: cipherstate,cs2_7: cipherstate)) in
        {494}let hs_28: handshakestate = handshakestatesetcs(hs_27,cs1_7) in
        {495}in(pub, message_c_2: bitstring);
        {496}let v_390: bitstring = catch-fail(handshakestateunpack(hs_28)) in
        {497}let v_391: bitstring = catch-fail(deconcat3(message_c_2)) in
        {498}let v_392: bool = catch-fail(true) in
        {499}let v_393: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_390))) in
        {500}let v_394: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_393))) in
        {501}let v_395: aead = catch-fail(decrypt(1-proj-2-tuple(v_394),2-proj-2-tuple(v_394),3-proj-3-tuple(v_393),3-proj-3-tuple(v_391))) in
        {502}let v_396: bitstring = catch-fail(aeadunpack(v_395)) in
        {503}let v_397: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_393))) in
        {504}let v_398: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_394))) && success?(1-proj-3-tuple(v_393))) then (if (not-caught-fail(v_397) && success?(is-true(success?(1-proj-2-tuple(v_397))))) then cipherstatepack(1-proj-2-tuple(v_397),increment_nonce(2-proj-2-tuple(v_394))) else fail-any) else fail-any)) in
        {505}let v_399: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_391)) && (success?(3-proj-3-tuple(v_393)) && success?(1-proj-3-tuple(v_393)))) then (if (not-caught-fail(v_394) && success?(is-true(success?(1-proj-2-tuple(v_394))))) then (if not-caught-fail(v_395) then (if (not-caught-fail(v_396) && success?(is-true(success?(1-proj-3-tuple(v_396))))) then (if not-caught-fail(v_398) then (v_398,3-proj-3-tuple(v_396),1-proj-3-tuple(v_396)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {506}let v_400: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_399),2-proj-3-tuple(v_393),3-proj-3-tuple(v_393)))) in
        {507}let v_401: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_391)) && success?(symmetricstatepack(1-proj-3-tuple(v_399),2-proj-3-tuple(v_393),3-proj-3-tuple(v_393)))) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-3-tuple(v_400))))) then symmetricstatepack(1-proj-3-tuple(v_400),2-proj-3-tuple(v_400),hash(3-proj-3-tuple(v_400),3-proj-3-tuple(v_391))) else fail-any) else fail-any)) in
        {508}let v_402: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_391)) && success?(1-proj-7-tuple(v_390))) then (if (not-caught-fail(v_393) && success?(is-true(success?(1-proj-3-tuple(v_393))))) then (if (not-caught-fail(v_399) && success?(is-true(success?(1-proj-3-tuple(v_399))))) then (if not-caught-fail(v_401) then (v_401,2-proj-3-tuple(v_399),3-proj-3-tuple(v_399)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_403: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_402),2-proj-7-tuple(v_390),3-proj-7-tuple(v_390),4-proj-7-tuple(v_390),5-proj-7-tuple(v_390),6-proj-7-tuple(v_390),7-proj-7-tuple(v_390))) in
        {510}let (hs_29: handshakestate,plaintext_c: bitstring,valid_5: bool) = (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-7-tuple(v_390))))) then (if (not-caught-fail(v_391) && success?(is-true(success?(1-proj-3-tuple(v_391))))) then (if not-caught-fail(v_392) then (if (not-caught-fail(v_402) && success?(is-true(success?(1-proj-3-tuple(v_402))))) then (if (v_392 && 3-proj-3-tuple(v_402)) then (if not-caught-fail(v_403) then (v_403,2-proj-3-tuple(v_402),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {511}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {512}insert statestore(bob,alice,sid,statepack_d(hs_29,handshakestategetcs(hs_29),cs2_7))
    ) | (
        {514}!
        {532}get statestore(=bob,=alice,=sid,statepack_d(hs_30: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {515}let hs_31: handshakestate = handshakestatesetcs(hs_30,cs2_8) in
        {516}let v_404: bitstring = catch-fail(handshakestateunpack(hs_31)) in
        {517}let v_405: bitstring = catch-fail((empty,empty,empty)) in
        {518}let v_406: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_404))) in
        {519}let v_407: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_406))) in
        {520}let v_408: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_407),2-proj-2-tuple(v_407),3-proj-3-tuple(v_406),msg_d(bob,alice,sid))) in
        {521}let v_409: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_406))) in
        {522}let v_410: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_407))) && success?(1-proj-3-tuple(v_406))) then (if (not-caught-fail(v_409) && success?(is-true(success?(1-proj-2-tuple(v_409))))) then cipherstatepack(1-proj-2-tuple(v_409),increment_nonce(2-proj-2-tuple(v_407))) else fail-any) else fail-any)) in
        {523}let v_411: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_406)) && success?(1-proj-3-tuple(v_406))) then (if (not-caught-fail(v_407) && success?(is-true(success?(1-proj-2-tuple(v_407))))) then (if not-caught-fail(v_408) then (if not-caught-fail(v_410) then (v_410,v_408) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {524}let v_412: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_411),2-proj-3-tuple(v_406),3-proj-3-tuple(v_406)))) in
        {525}let v_413: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_411)) && success?(symmetricstatepack(1-proj-2-tuple(v_411),2-proj-3-tuple(v_406),3-proj-3-tuple(v_406)))) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-3-tuple(v_412))))) then symmetricstatepack(1-proj-3-tuple(v_412),2-proj-3-tuple(v_412),hash(3-proj-3-tuple(v_412),2-proj-2-tuple(v_411))) else fail-any) else fail-any)) in
        {526}let v_414: bitstring = catch-fail((if success?(1-proj-7-tuple(v_404)) then (if (not-caught-fail(v_406) && success?(is-true(success?(1-proj-3-tuple(v_406))))) then (if (not-caught-fail(v_411) && success?(is-true(success?(1-proj-2-tuple(v_411))))) then (if not-caught-fail(v_413) then (v_413,2-proj-2-tuple(v_411)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {527}let v_415: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_414),2-proj-7-tuple(v_404),3-proj-7-tuple(v_404),4-proj-7-tuple(v_404),5-proj-7-tuple(v_404),6-proj-7-tuple(v_404),7-proj-7-tuple(v_404))) in
        {528}let v_416: bitstring = catch-fail(concat3(1-proj-3-tuple(v_405),2-proj-3-tuple(v_405),2-proj-2-tuple(v_414))) in
        {529}let (hs_32: handshakestate,message_d_2: bitstring) = (if (not-caught-fail(v_404) && success?(is-true(success?(1-proj-7-tuple(v_404))))) then (if (not-caught-fail(v_405) && success?(is-true(success?(1-proj-3-tuple(v_405))))) then (if (not-caught-fail(v_414) && success?(is-true(success?(1-proj-2-tuple(v_414))))) then (if not-caught-fail(v_415) then (if not-caught-fail(v_416) then (v_415,v_416) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {530}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {531}out(pub, message_d_2)
    ) | (
        {533}event LeakPsk(phase0,alice,bob);
        {534}out(pub, key_psk(alice,bob))
    ) | (
        {535}phase 1;
        {536}event LeakPsk(phase1,alice,bob);
        {537}out(pub, key_psk(alice,bob))
    ) | (
        {538}event LeakS(phase0,bob);
        {539}out(pub, key_s(bob))
    ) | (
        {540}phase 1;
        {541}event LeakS(phase1,bob);
        {542}out(pub, key_s(bob))
    )
) | (
    {543}let s_3: keypair = keypairpack(empty,empty) in
    {544}out(pub, getpublickey(s_3));
    (
        {545}let e_3: keypair = keypairpack(empty,empty) in
        {546}let rs_3: key = empty in
        {547}let re_3: key = empty in
        {548}let v_417: bitstring = catch-fail(hash(somename,empty)) in
        {549}let v_418: key = catch-fail(v_417) in
        {550}let v_419: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {551}let v_420: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_417) then (if not-caught-fail(v_418) then (if not-caught-fail(v_419) then symmetricstatepack(v_419,v_418,v_417) else fail-any) else fail-any) else fail-any))) in
        {552}let v_421: symmetricstate = catch-fail((if success?((if not-caught-fail(v_417) then (if not-caught-fail(v_418) then (if not-caught-fail(v_419) then symmetricstatepack(v_419,v_418,v_417) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_420) && success?(is-true(success?(1-proj-3-tuple(v_420))))) then symmetricstatepack(1-proj-3-tuple(v_420),2-proj-3-tuple(v_420),hash(3-proj-3-tuple(v_420),empty)) else fail-any) else fail-any)) in
        {553}let hs_33: handshakestate = (if not-caught-fail(v_421) then handshakestatepack(v_421,s_3,e_3,rs_3,re_3,key_psk(charlie,bob),false) else fail-any) in
        {554}insert statestore(bob,charlie,sid,statepack_a(hs_33))
    ) | (
        {602}get statestore(=bob,=charlie,=sid,statepack_a(hs_34: handshakestate)) in
        {555}in(pub, message_a_3: bitstring);
        {556}let v_422: bitstring = catch-fail(handshakestateunpack(hs_34)) in
        {557}let v_423: bitstring = catch-fail(deconcat3(message_a_3)) in
        {558}let v_424: bool = catch-fail(true) in
        {559}let v_425: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_422))) in
        {560}let v_426: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_425),6-proj-7-tuple(v_422))) in
        {561}let v_427: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_425),6-proj-7-tuple(v_422))) in
        {562}let v_428: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_425),6-proj-7-tuple(v_422))) in
        {563}let v_429: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_422)) && success?(2-proj-3-tuple(v_425))) then (if not-caught-fail(v_426) then (if not-caught-fail(v_427) then (if not-caught-fail(v_428) then (v_426,v_427,v_428) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {564}let v_430: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_425),1-proj-3-tuple(v_429),3-proj-3-tuple(v_425)))) in
        {565}let v_431: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_429)) && success?(symmetricstatepack(1-proj-3-tuple(v_425),1-proj-3-tuple(v_429),3-proj-3-tuple(v_425)))) then (if (not-caught-fail(v_430) && success?(is-true(success?(1-proj-3-tuple(v_430))))) then symmetricstatepack(1-proj-3-tuple(v_430),2-proj-3-tuple(v_430),hash(3-proj-3-tuple(v_430),2-proj-3-tuple(v_429))) else fail-any) else fail-any))) in
        {566}let v_432: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_422)) && success?(1-proj-7-tuple(v_422))) then (if (not-caught-fail(v_425) && success?(is-true(success?(1-proj-3-tuple(v_425))))) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-3-tuple(v_429))))) then (if (not-caught-fail(v_431) && success?(is-true(success?(1-proj-3-tuple(v_431))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_429)) then cipherstatepack(3-proj-3-tuple(v_429),minnonce) else fail-any),1-proj-3-tuple(v_429),3-proj-3-tuple(v_431)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {567}let v_433: key = catch-fail(1-proj-3-tuple(v_423)) in
        {568}let v_434: bitstring = catch-fail(symmetricstateunpack(v_432)) in
        {569}let v_435: symmetricstate = catch-fail((if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-3-tuple(v_434))))) then symmetricstatepack(1-proj-3-tuple(v_434),2-proj-3-tuple(v_434),hash(3-proj-3-tuple(v_434),v_433)) else fail-any)) in
        {570}let v_436: bitstring = catch-fail(symmetricstateunpack(v_435)) in
        {571}let v_437: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_436),v_433)) in
        {572}let v_438: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_436),v_433)) in
        {573}let v_439: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_436),v_433)) in
        {574}let v_440: bitstring = catch-fail((if success?(2-proj-3-tuple(v_436)) then (if not-caught-fail(v_437) then (if not-caught-fail(v_438) then (if not-caught-fail(v_439) then (v_437,v_438,v_439) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {575}let v_441: symmetricstate = catch-fail((if (not-caught-fail(v_436) && success?(is-true(success?(1-proj-3-tuple(v_436))))) then (if (not-caught-fail(v_440) && success?(is-true(success?(1-proj-3-tuple(v_440))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_440)) then cipherstatepack(2-proj-3-tuple(v_440),minnonce) else fail-any),1-proj-3-tuple(v_440),3-proj-3-tuple(v_436)) else fail-any) else fail-any)) in
        {576}let v_442: bitstring = catch-fail(symmetricstateunpack(v_441)) in
        {577}let v_443: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_442))) in
        {578}let v_444: aead = catch-fail(decrypt(1-proj-2-tuple(v_443),2-proj-2-tuple(v_443),3-proj-3-tuple(v_442),2-proj-3-tuple(v_423))) in
        {579}let v_445: bitstring = catch-fail(aeadunpack(v_444)) in
        {580}let v_446: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_442))) in
        {581}let v_447: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_443))) && success?(1-proj-3-tuple(v_442))) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then cipherstatepack(1-proj-2-tuple(v_446),increment_nonce(2-proj-2-tuple(v_443))) else fail-any) else fail-any)) in
        {582}let v_448: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_423)) && (success?(3-proj-3-tuple(v_442)) && success?(1-proj-3-tuple(v_442)))) then (if (not-caught-fail(v_443) && success?(is-true(success?(1-proj-2-tuple(v_443))))) then (if not-caught-fail(v_444) then (if (not-caught-fail(v_445) && success?(is-true(success?(1-proj-3-tuple(v_445))))) then (if not-caught-fail(v_447) then (v_447,3-proj-3-tuple(v_445),1-proj-3-tuple(v_445)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {583}let v_449: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_448),2-proj-3-tuple(v_442),3-proj-3-tuple(v_442)))) in
        {584}let v_450: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_423)) && success?(symmetricstatepack(1-proj-3-tuple(v_448),2-proj-3-tuple(v_442),3-proj-3-tuple(v_442)))) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-3-tuple(v_449))))) then symmetricstatepack(1-proj-3-tuple(v_449),2-proj-3-tuple(v_449),hash(3-proj-3-tuple(v_449),2-proj-3-tuple(v_423))) else fail-any) else fail-any)) in
        {585}let v_451: bitstring = catch-fail((if success?(2-proj-3-tuple(v_423)) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-3-tuple(v_442))))) then (if (not-caught-fail(v_448) && success?(is-true(success?(1-proj-3-tuple(v_448))))) then (if not-caught-fail(v_450) then (v_450,2-proj-3-tuple(v_448),3-proj-3-tuple(v_448)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {586}let v_452: key = catch-fail(2-proj-3-tuple(v_451)) in
        {587}let v_453: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_451))) in
        {588}let v_454: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_453))) in
        {589}let v_455: aead = catch-fail(decrypt(1-proj-2-tuple(v_454),2-proj-2-tuple(v_454),3-proj-3-tuple(v_453),3-proj-3-tuple(v_423))) in
        {590}let v_456: bitstring = catch-fail(aeadunpack(v_455)) in
        {591}let v_457: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_453))) in
        {592}let v_458: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_454))) && success?(1-proj-3-tuple(v_453))) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-2-tuple(v_457))))) then cipherstatepack(1-proj-2-tuple(v_457),increment_nonce(2-proj-2-tuple(v_454))) else fail-any) else fail-any)) in
        {593}let v_459: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_423)) && (success?(3-proj-3-tuple(v_453)) && success?(1-proj-3-tuple(v_453)))) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-2-tuple(v_454))))) then (if not-caught-fail(v_455) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-3-tuple(v_456))))) then (if not-caught-fail(v_458) then (v_458,3-proj-3-tuple(v_456),1-proj-3-tuple(v_456)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {594}let v_460: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_459),2-proj-3-tuple(v_453),3-proj-3-tuple(v_453)))) in
        {595}let v_461: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_423)) && success?(symmetricstatepack(1-proj-3-tuple(v_459),2-proj-3-tuple(v_453),3-proj-3-tuple(v_453)))) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-3-tuple(v_460))))) then symmetricstatepack(1-proj-3-tuple(v_460),2-proj-3-tuple(v_460),hash(3-proj-3-tuple(v_460),3-proj-3-tuple(v_423))) else fail-any) else fail-any)) in
        {596}let v_462: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_423)) && success?(1-proj-3-tuple(v_451))) then (if (not-caught-fail(v_453) && success?(is-true(success?(1-proj-3-tuple(v_453))))) then (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-3-tuple(v_459))))) then (if not-caught-fail(v_461) then (v_461,2-proj-3-tuple(v_459),3-proj-3-tuple(v_459)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {597}let v_463: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {598}let v_464: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_462),2-proj-7-tuple(v_422),3-proj-7-tuple(v_422),v_452,v_433,6-proj-7-tuple(v_422),7-proj-7-tuple(v_422))) in
        {599}let (hs_35: handshakestate,plaintext_a_1: bitstring,valid_6: bool) = (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-7-tuple(v_422))))) then (if (not-caught-fail(v_423) && success?(is-true(success?(1-proj-3-tuple(v_423))))) then (if not-caught-fail(v_424) then (if not-caught-fail(v_432) then (if not-caught-fail(v_433) then (if not-caught-fail(v_435) then (if not-caught-fail(v_441) then (if (not-caught-fail(v_451) && success?(is-true(success?(1-proj-3-tuple(v_451))))) then (if not-caught-fail(v_452) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-3-tuple(v_462))))) then (if ((3-proj-3-tuple(v_451) && 3-proj-3-tuple(v_462)) && (v_452 = getpublickey((if not-caught-fail(v_463) then keypairpack(validkey(v_463),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_464) then (v_464,2-proj-3-tuple(v_462),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {600}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1);
        {601}insert statestore(bob,charlie,sid,statepack_b(hs_35))
    ) | (
        {671}get statestore(=bob,=charlie,=sid,statepack_b(hs_36: handshakestate)) in
        {603}let v_465: bitstring = catch-fail(handshakestateunpack(hs_36)) in
        {604}let v_466: bitstring = catch-fail((empty,empty,empty)) in
        {605}let v_467: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {606}let v_468: keypair = catch-fail((if not-caught-fail(v_467) then keypairpack(validkey(v_467),key_e(bob,charlie,sid)) else fail-any)) in
        {607}let v_469: bitstring = catch-fail(getpublickey(v_468)) in
        {608}let v_470: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_465))) in
        {609}let v_471: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_465)) then (if (not-caught-fail(v_470) && success?(is-true(success?(1-proj-3-tuple(v_470))))) then symmetricstatepack(1-proj-3-tuple(v_470),2-proj-3-tuple(v_470),hash(3-proj-3-tuple(v_470),v_469)) else fail-any) else fail-any)) in
        {610}let v_472: bitstring = catch-fail(symmetricstateunpack(v_471)) in
        {611}let v_473: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_472),getpublickey(v_468))) in
        {612}let v_474: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_472),getpublickey(v_468))) in
        {613}let v_475: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_472),getpublickey(v_468))) in
        {614}let v_476: bitstring = catch-fail((if (success?(getpublickey(v_468)) && success?(2-proj-3-tuple(v_472))) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then (if not-caught-fail(v_475) then (v_473,v_474,v_475) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {615}let v_477: symmetricstate = catch-fail((if success?(getpublickey(v_468)) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-3-tuple(v_472))))) then (if (not-caught-fail(v_476) && success?(is-true(success?(1-proj-3-tuple(v_476))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_476)) then cipherstatepack(2-proj-3-tuple(v_476),minnonce) else fail-any),1-proj-3-tuple(v_476),3-proj-3-tuple(v_472)) else fail-any) else fail-any) else fail-any)) in
        {616}let v_478: bitstring = catch-fail(keypairunpack(v_468)) in
        {617}let v_479: bitstring = catch-fail(symmetricstateunpack(v_477)) in
        {618}let v_480: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_479),(if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-2-tuple(v_478))))) then dhexp(2-proj-2-tuple(v_478),5-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {619}let v_481: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_479),(if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-2-tuple(v_478))))) then dhexp(2-proj-2-tuple(v_478),5-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {620}let v_482: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_479),(if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-2-tuple(v_478))))) then dhexp(2-proj-2-tuple(v_478),5-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {621}let v_483: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-2-tuple(v_478))))) then dhexp(2-proj-2-tuple(v_478),5-proj-7-tuple(v_465)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_479))) then (if not-caught-fail(v_480) then (if not-caught-fail(v_481) then (if not-caught-fail(v_482) then (v_480,v_481,v_482) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {622}let v_484: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-2-tuple(v_478))))) then dhexp(2-proj-2-tuple(v_478),5-proj-7-tuple(v_465)) else fail-any) else fail-any)) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_483)) then cipherstatepack(2-proj-3-tuple(v_483),minnonce) else fail-any),1-proj-3-tuple(v_483),3-proj-3-tuple(v_479)) else fail-any) else fail-any) else fail-any)) in
        {623}let v_485: bitstring = catch-fail(keypairunpack(v_468)) in
        {624}let v_486: bitstring = catch-fail(symmetricstateunpack(v_484)) in
        {625}let v_487: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_486),(if success?(4-proj-7-tuple(v_465)) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-2-tuple(v_485))))) then dhexp(2-proj-2-tuple(v_485),4-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {626}let v_488: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_486),(if success?(4-proj-7-tuple(v_465)) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-2-tuple(v_485))))) then dhexp(2-proj-2-tuple(v_485),4-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {627}let v_489: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_486),(if success?(4-proj-7-tuple(v_465)) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-2-tuple(v_485))))) then dhexp(2-proj-2-tuple(v_485),4-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {628}let v_490: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_465)) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-2-tuple(v_485))))) then dhexp(2-proj-2-tuple(v_485),4-proj-7-tuple(v_465)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_486))) then (if not-caught-fail(v_487) then (if not-caught-fail(v_488) then (if not-caught-fail(v_489) then (v_487,v_488,v_489) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_491: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_465)) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-2-tuple(v_485))))) then dhexp(2-proj-2-tuple(v_485),4-proj-7-tuple(v_465)) else fail-any) else fail-any)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-3-tuple(v_486))))) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-3-tuple(v_490))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_490)) then cipherstatepack(2-proj-3-tuple(v_490),minnonce) else fail-any),1-proj-3-tuple(v_490),3-proj-3-tuple(v_486)) else fail-any) else fail-any) else fail-any)) in
        {630}let v_492: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {631}let v_493: keypair = catch-fail((if not-caught-fail(v_492) then keypairpack(validkey(v_492),key_s(bob)) else fail-any)) in
        {632}let v_494: bitstring = catch-fail(symmetricstateunpack(v_491)) in
        {633}let v_495: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_494))) in
        {634}let v_496: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_495),2-proj-2-tuple(v_495),3-proj-3-tuple(v_494),getpublickey(v_493))) in
        {635}let v_497: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_494))) in
        {636}let v_498: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_495))) && success?(1-proj-3-tuple(v_494))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then cipherstatepack(1-proj-2-tuple(v_497),increment_nonce(2-proj-2-tuple(v_495))) else fail-any) else fail-any)) in
        {637}let v_499: bitstring = catch-fail((if (success?(getpublickey(v_493)) && (success?(3-proj-3-tuple(v_494)) && success?(1-proj-3-tuple(v_494)))) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then (if not-caught-fail(v_496) then (if not-caught-fail(v_498) then (v_498,v_496) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {638}let v_500: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_499),2-proj-3-tuple(v_494),3-proj-3-tuple(v_494)))) in
        {639}let v_501: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_499)) && success?(symmetricstatepack(1-proj-2-tuple(v_499),2-proj-3-tuple(v_494),3-proj-3-tuple(v_494)))) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then symmetricstatepack(1-proj-3-tuple(v_500),2-proj-3-tuple(v_500),hash(3-proj-3-tuple(v_500),2-proj-2-tuple(v_499))) else fail-any) else fail-any)) in
        {640}let v_502: bitstring = catch-fail((if success?(getpublickey(v_493)) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-3-tuple(v_494))))) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-2-tuple(v_499))))) then (if not-caught-fail(v_501) then (v_501,2-proj-2-tuple(v_499)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {641}let v_503: bitstring = catch-fail(keypairunpack(v_493)) in
        {642}let v_504: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_502))) in
        {643}let v_505: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_504),(if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-2-tuple(v_503))))) then dhexp(2-proj-2-tuple(v_503),5-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {644}let v_506: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_504),(if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-2-tuple(v_503))))) then dhexp(2-proj-2-tuple(v_503),5-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {645}let v_507: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_504),(if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-2-tuple(v_503))))) then dhexp(2-proj-2-tuple(v_503),5-proj-7-tuple(v_465)) else fail-any) else fail-any))) in
        {646}let v_508: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-2-tuple(v_503))))) then dhexp(2-proj-2-tuple(v_503),5-proj-7-tuple(v_465)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_504))) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (if not-caught-fail(v_507) then (v_505,v_506,v_507) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {647}let v_509: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_465)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-2-tuple(v_503))))) then dhexp(2-proj-2-tuple(v_503),5-proj-7-tuple(v_465)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_502))) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-3-tuple(v_504))))) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_508)) then cipherstatepack(2-proj-3-tuple(v_508),minnonce) else fail-any),1-proj-3-tuple(v_508),3-proj-3-tuple(v_504)) else fail-any) else fail-any) else fail-any)) in
        {648}let v_510: bitstring = catch-fail(symmetricstateunpack(v_509)) in
        {649}let v_511: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_510))) in
        {650}let v_512: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_511),2-proj-2-tuple(v_511),3-proj-3-tuple(v_510),msg_b(bob,charlie,sid))) in
        {651}let v_513: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_510))) in
        {652}let v_514: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_511))) && success?(1-proj-3-tuple(v_510))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then cipherstatepack(1-proj-2-tuple(v_513),increment_nonce(2-proj-2-tuple(v_511))) else fail-any) else fail-any)) in
        {653}let v_515: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_510)) && success?(1-proj-3-tuple(v_510))) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-2-tuple(v_511))))) then (if not-caught-fail(v_512) then (if not-caught-fail(v_514) then (v_514,v_512) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {654}let v_516: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_515),2-proj-3-tuple(v_510),3-proj-3-tuple(v_510)))) in
        {655}let v_517: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_515)) && success?(symmetricstatepack(1-proj-2-tuple(v_515),2-proj-3-tuple(v_510),3-proj-3-tuple(v_510)))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then symmetricstatepack(1-proj-3-tuple(v_516),2-proj-3-tuple(v_516),hash(3-proj-3-tuple(v_516),2-proj-2-tuple(v_515))) else fail-any) else fail-any)) in
        {656}let v_518: bitstring = catch-fail((if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-2-tuple(v_515))))) then (if not-caught-fail(v_517) then (v_517,2-proj-2-tuple(v_515)) else fail-any) else fail-any) else fail-any)) in
        {657}let v_519: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_518),v_493,v_468,4-proj-7-tuple(v_465),5-proj-7-tuple(v_465),6-proj-7-tuple(v_465),7-proj-7-tuple(v_465))) in
        {658}let v_520: bitstring = catch-fail(concat3(v_469,2-proj-2-tuple(v_502),2-proj-2-tuple(v_518))) in
        {659}let v_521: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_518))) in
        {660}let v_522: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_521),zero)) in
        {661}let v_523: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_521),zero)) in
        {662}let v_524: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_521),zero)) in
        {663}let v_525: bitstring = catch-fail((if success?(2-proj-3-tuple(v_521)) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then (v_522,v_523,v_524) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {664}let v_526: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_525)) then cipherstatepack(1-proj-3-tuple(v_525),minnonce) else fail-any)) in
        {665}let v_527: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_525)) then cipherstatepack(2-proj-3-tuple(v_525),minnonce) else fail-any)) in
        {666}let v_528: bitstring = catch-fail((if success?(1-proj-2-tuple(v_518)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then (if not-caught-fail(v_526) then (if not-caught-fail(v_527) then (1-proj-2-tuple(v_518),v_526,v_527) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {667}let (hs_37: handshakestate,message_b_3: bitstring,cs1_9: cipherstate,cs2_9: cipherstate) = (if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-7-tuple(v_465))))) then (if (not-caught-fail(v_466) && success?(is-true(success?(1-proj-3-tuple(v_466))))) then (if not-caught-fail(v_468) then (if not-caught-fail(v_469) then (if not-caught-fail(v_471) then (if not-caught-fail(v_477) then (if not-caught-fail(v_484) then (if not-caught-fail(v_491) then (if not-caught-fail(v_493) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-2-tuple(v_502))))) then (if not-caught-fail(v_509) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-2-tuple(v_518))))) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then (v_519,v_520,2-proj-3-tuple(v_528),3-proj-3-tuple(v_528)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {668}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {669}insert statestore(bob,charlie,sid,statepack_c(hs_37,cs1_9,cs2_9));
        {670}out(pub, message_b_3)
    ) | (
        {672}!
        {692}get statestore(=bob,=charlie,=sid,statepack_c(hs_38: handshakestate,cs1_10: cipherstate,cs2_10: cipherstate)) in
        {673}let hs_39: handshakestate = handshakestatesetcs(hs_38,cs1_10) in
        {674}in(pub, message_c_3: bitstring);
        {675}let v_529: bitstring = catch-fail(handshakestateunpack(hs_39)) in
        {676}let v_530: bitstring = catch-fail(deconcat3(message_c_3)) in
        {677}let v_531: bool = catch-fail(true) in
        {678}let v_532: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_529))) in
        {679}let v_533: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_532))) in
        {680}let v_534: aead = catch-fail(decrypt(1-proj-2-tuple(v_533),2-proj-2-tuple(v_533),3-proj-3-tuple(v_532),3-proj-3-tuple(v_530))) in
        {681}let v_535: bitstring = catch-fail(aeadunpack(v_534)) in
        {682}let v_536: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_532))) in
        {683}let v_537: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_533))) && success?(1-proj-3-tuple(v_532))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then cipherstatepack(1-proj-2-tuple(v_536),increment_nonce(2-proj-2-tuple(v_533))) else fail-any) else fail-any)) in
        {684}let v_538: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_530)) && (success?(3-proj-3-tuple(v_532)) && success?(1-proj-3-tuple(v_532)))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then (if not-caught-fail(v_534) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if not-caught-fail(v_537) then (v_537,3-proj-3-tuple(v_535),1-proj-3-tuple(v_535)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {685}let v_539: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_538),2-proj-3-tuple(v_532),3-proj-3-tuple(v_532)))) in
        {686}let v_540: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_530)) && success?(symmetricstatepack(1-proj-3-tuple(v_538),2-proj-3-tuple(v_532),3-proj-3-tuple(v_532)))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),3-proj-3-tuple(v_530))) else fail-any) else fail-any)) in
        {687}let v_541: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_530)) && success?(1-proj-7-tuple(v_529))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if not-caught-fail(v_540) then (v_540,2-proj-3-tuple(v_538),3-proj-3-tuple(v_538)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {688}let v_542: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_541),2-proj-7-tuple(v_529),3-proj-7-tuple(v_529),4-proj-7-tuple(v_529),5-proj-7-tuple(v_529),6-proj-7-tuple(v_529),7-proj-7-tuple(v_529))) in
        {689}let (hs_40: handshakestate,plaintext_c_1: bitstring,valid_7: bool) = (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-7-tuple(v_529))))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then (if not-caught-fail(v_531) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if (v_531 && 3-proj-3-tuple(v_541)) then (if not-caught-fail(v_542) then (v_542,2-proj-3-tuple(v_541),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {690}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1);
        {691}insert statestore(bob,charlie,sid,statepack_d(hs_40,handshakestategetcs(hs_40),cs2_10))
    ) | (
        {693}!
        {711}get statestore(=bob,=charlie,=sid,statepack_d(hs_41: handshakestate,cs1_11: cipherstate,cs2_11: cipherstate)) in
        {694}let hs_42: handshakestate = handshakestatesetcs(hs_41,cs2_11) in
        {695}let v_543: bitstring = catch-fail(handshakestateunpack(hs_42)) in
        {696}let v_544: bitstring = catch-fail((empty,empty,empty)) in
        {697}let v_545: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_543))) in
        {698}let v_546: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_545))) in
        {699}let v_547: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_546),2-proj-2-tuple(v_546),3-proj-3-tuple(v_545),msg_d(bob,charlie,sid))) in
        {700}let v_548: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_545))) in
        {701}let v_549: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_546))) && success?(1-proj-3-tuple(v_545))) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then cipherstatepack(1-proj-2-tuple(v_548),increment_nonce(2-proj-2-tuple(v_546))) else fail-any) else fail-any)) in
        {702}let v_550: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_545)) && success?(1-proj-3-tuple(v_545))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then (if not-caught-fail(v_547) then (if not-caught-fail(v_549) then (v_549,v_547) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {703}let v_551: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_550),2-proj-3-tuple(v_545),3-proj-3-tuple(v_545)))) in
        {704}let v_552: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_550)) && success?(symmetricstatepack(1-proj-2-tuple(v_550),2-proj-3-tuple(v_545),3-proj-3-tuple(v_545)))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then symmetricstatepack(1-proj-3-tuple(v_551),2-proj-3-tuple(v_551),hash(3-proj-3-tuple(v_551),2-proj-2-tuple(v_550))) else fail-any) else fail-any)) in
        {705}let v_553: bitstring = catch-fail((if success?(1-proj-7-tuple(v_543)) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then (if not-caught-fail(v_552) then (v_552,2-proj-2-tuple(v_550)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {706}let v_554: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_553),2-proj-7-tuple(v_543),3-proj-7-tuple(v_543),4-proj-7-tuple(v_543),5-proj-7-tuple(v_543),6-proj-7-tuple(v_543),7-proj-7-tuple(v_543))) in
        {707}let v_555: bitstring = catch-fail(concat3(1-proj-3-tuple(v_544),2-proj-3-tuple(v_544),2-proj-2-tuple(v_553))) in
        {708}let (hs_43: handshakestate,message_d_3: bitstring) = (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-7-tuple(v_543))))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then (if not-caught-fail(v_554) then (if not-caught-fail(v_555) then (v_554,v_555) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {709}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {710}out(pub, message_d_3)
    ) | (
        {712}event LeakPsk(phase0,charlie,bob);
        {713}out(pub, key_psk(charlie,bob))
    ) | (
        {714}phase 1;
        {715}event LeakPsk(phase1,charlie,bob);
        {716}out(pub, key_psk(charlie,bob))
    ) | (
        {717}event LeakS(phase0,bob);
        {718}out(pub, key_s(bob))
    ) | (
        {719}phase 1;
        {720}event LeakS(phase1,bob);
        {721}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)); not event(RecvEnd(true)) in process 0.
Completing...
200 rules inserted. The rule base contains 200 rules. 300 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 119 rules in the queue.
600 rules inserted. The rule base contains 579 rules. 155 rules in the queue.
800 rules inserted. The rule base contains 756 rules. 93 rules in the queue.
1000 rules inserted. The rule base contains 950 rules. 237 rules in the queue.
1200 rules inserted. The rule base contains 1113 rules. 191 rules in the queue.
1400 rules inserted. The rule base contains 1265 rules. 167 rules in the queue.
1600 rules inserted. The rule base contains 1391 rules. 200 rules in the queue.
1800 rules inserted. The rule base contains 1525 rules. 239 rules in the queue.
2000 rules inserted. The rule base contains 1642 rules. 240 rules in the queue.
2200 rules inserted. The rule base contains 1738 rules. 250 rules in the queue.
2400 rules inserted. The rule base contains 1835 rules. 227 rules in the queue.
2600 rules inserted. The rule base contains 1983 rules. 222 rules in the queue.
2800 rules inserted. The rule base contains 2123 rules. 224 rules in the queue.
3000 rules inserted. The rule base contains 2253 rules. 225 rules in the queue.
3200 rules inserted. The rule base contains 2402 rules. 248 rules in the queue.
3400 rules inserted. The rule base contains 2544 rules. 264 rules in the queue.
3600 rules inserted. The rule base contains 2706 rules. 273 rules in the queue.
3800 rules inserted. The rule base contains 2877 rules. 296 rules in the queue.
4000 rules inserted. The rule base contains 3030 rules. 331 rules in the queue.
4200 rules inserted. The rule base contains 3160 rules. 371 rules in the queue.
4400 rules inserted. The rule base contains 3318 rules. 410 rules in the queue.
4600 rules inserted. The rule base contains 3422 rules. 450 rules in the queue.
4800 rules inserted. The rule base contains 3572 rules. 499 rules in the queue.
5000 rules inserted. The rule base contains 3649 rules. 529 rules in the queue.
5200 rules inserted. The rule base contains 3773 rules. 615 rules in the queue.
5400 rules inserted. The rule base contains 3899 rules. 592 rules in the queue.
5600 rules inserted. The rule base contains 4014 rules. 665 rules in the queue.
5800 rules inserted. The rule base contains 4128 rules. 729 rules in the queue.
6000 rules inserted. The rule base contains 4224 rules. 708 rules in the queue.
6200 rules inserted. The rule base contains 4324 rules. 757 rules in the queue.
6400 rules inserted. The rule base contains 4414 rules. 802 rules in the queue.
6600 rules inserted. The rule base contains 4539 rules. 802 rules in the queue.
6800 rules inserted. The rule base contains 4613 rules. 798 rules in the queue.
7000 rules inserted. The rule base contains 4701 rules. 804 rules in the queue.
7200 rules inserted. The rule base contains 4799 rules. 804 rules in the queue.
7400 rules inserted. The rule base contains 4932 rules. 812 rules in the queue.
7600 rules inserted. The rule base contains 5018 rules. 762 rules in the queue.
7800 rules inserted. The rule base contains 5132 rules. 726 rules in the queue.
8000 rules inserted. The rule base contains 5277 rules. 692 rules in the queue.
8200 rules inserted. The rule base contains 5401 rules. 699 rules in the queue.
8400 rules inserted. The rule base contains 5514 rules. 650 rules in the queue.
8600 rules inserted. The rule base contains 5590 rules. 585 rules in the queue.
8800 rules inserted. The rule base contains 5721 rules. 638 rules in the queue.
9000 rules inserted. The rule base contains 5811 rules. 578 rules in the queue.
9200 rules inserted. The rule base contains 5948 rules. 571 rules in the queue.
9400 rules inserted. The rule base contains 6038 rules. 627 rules in the queue.
9600 rules inserted. The rule base contains 6149 rules. 608 rules in the queue.
9800 rules inserted. The rule base contains 6239 rules. 625 rules in the queue.
10000 rules inserted. The rule base contains 6273 rules. 729 rules in the queue.
10200 rules inserted. The rule base contains 6339 rules. 724 rules in the queue.
10400 rules inserted. The rule base contains 6430 rules. 720 rules in the queue.
10600 rules inserted. The rule base contains 6524 rules. 821 rules in the queue.
10800 rules inserted. The rule base contains 6547 rules. 789 rules in the queue.
11000 rules inserted. The rule base contains 6652 rules. 804 rules in the queue.
11200 rules inserted. The rule base contains 6741 rules. 814 rules in the queue.
11400 rules inserted. The rule base contains 6870 rules. 790 rules in the queue.
11600 rules inserted. The rule base contains 6982 rules. 725 rules in the queue.
11800 rules inserted. The rule base contains 7048 rules. 657 rules in the queue.
12000 rules inserted. The rule base contains 7177 rules. 633 rules in the queue.
12200 rules inserted. The rule base contains 7305 rules. 593 rules in the queue.
12400 rules inserted. The rule base contains 7351 rules. 615 rules in the queue.
12600 rules inserted. The rule base contains 7441 rules. 526 rules in the queue.
12800 rules inserted. The rule base contains 7526 rules. 532 rules in the queue.
13000 rules inserted. The rule base contains 7613 rules. 577 rules in the queue.
13200 rules inserted. The rule base contains 7691 rules. 592 rules in the queue.
13400 rules inserted. The rule base contains 7788 rules. 540 rules in the queue.
13600 rules inserted. The rule base contains 7871 rules. 595 rules in the queue.
13800 rules inserted. The rule base contains 7958 rules. 588 rules in the queue.
14000 rules inserted. The rule base contains 8042 rules. 529 rules in the queue.
14200 rules inserted. The rule base contains 8012 rules. 505 rules in the queue.
14400 rules inserted. The rule base contains 8133 rules. 403 rules in the queue.
14600 rules inserted. The rule base contains 8259 rules. 372 rules in the queue.
14800 rules inserted. The rule base contains 8277 rules. 289 rules in the queue.
15000 rules inserted. The rule base contains 8345 rules. 195 rules in the queue.
15200 rules inserted. The rule base contains 8448 rules. 110 rules in the queue.
15400 rules inserted. The rule base contains 8287 rules. 67 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_a(sid_2),msg_a(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_a(sid_2),msg_a(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_a(sid_2),msg_a(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_a(sid_2),msg_a(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_a(sid_2),msg_a(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> attacker_p1(msg_a(alice,bob,sid_1))
Abbreviations:
sid_1 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_1 = sid[!1 = @sid]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))).

9. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1),g))).

10. By 9, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1),g))).

11. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

12. The event LeakPsk(phase1,alice,bob) may be executed at {177}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {178}.
mess_p1(pub,key_psk(alice,bob)).

13. By 11, the attacker may have the channel pub in phase 1.
By 12, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 13, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

18. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 17, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 22, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

24. By 16, the attacker may know hash(somename,empty) in phase 1.
By 13, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)))).

26. By 25, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
By 23, the attacker may know increment_nonce(minnonce) in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

27. By 26, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1)).

28. By 27, attacker_p1(msg_a(alice,bob,sid_1)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_1)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> attacker_p1(msg_a(alice,bob,sid_1))
Abbreviations:
sid_1 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_1 = sid[!1 = @sid]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))).

9. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1),g))).

10. By 9, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1),g))).

11. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

12. The event LeakPsk(phase1,alice,bob) may be executed at {177}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {178}.
mess_p1(pub,key_psk(alice,bob)).

13. By 11, the attacker may have the channel pub in phase 1.
By 12, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 13, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

18. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 17, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 22, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

24. By 16, the attacker may know hash(somename,empty) in phase 1.
By 13, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)))).

26. By 25, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
By 23, the attacker may know increment_nonce(minnonce) in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

27. By 26, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1)).

28. By 27, attacker_p1(msg_a(alice,bob,sid_1)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_1)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> attacker_p1(msg_a(alice,bob,sid_1))
Abbreviations:
sid_1 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_1 = sid[!1 = @sid]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))).

9. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1),g))).

10. By 9, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1),g))).

11. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

12. The event LeakPsk(phase1,alice,bob) may be executed at {177}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {178}.
mess_p1(pub,key_psk(alice,bob)).

13. By 11, the attacker may have the channel pub in phase 1.
By 12, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 13, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

18. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 17, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 22, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

24. By 16, the attacker may know hash(somename,empty) in phase 1.
By 13, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)))).

26. By 25, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
By 23, the attacker may know increment_nonce(minnonce) in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

27. By 26, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1)).

28. By 27, attacker_p1(msg_a(alice,bob,sid_1)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_1)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> attacker_p1(msg_a(alice,bob,sid_1))
Abbreviations:
sid_1 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_1 = sid[!1 = @sid]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))).

8. By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))).

9. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1),g))).

10. By 9, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1),g))).

11. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

12. The event LeakPsk(phase1,alice,bob) may be executed at {177}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {178}.
mess_p1(pub,key_psk(alice,bob)).

13. By 11, the attacker may have the channel pub in phase 1.
By 12, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 13, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

18. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 17, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 22, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

24. By 16, the attacker may know hash(somename,empty) in phase 1.
By 13, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)))).

26. By 25, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))) in phase 1.
By 23, the attacker may know increment_nonce(minnonce) in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))).

27. By 26, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1)).

28. By 27, attacker_p1(msg_a(alice,bob,sid_1)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_1)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_b(sid_2),msg_b(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_b(sid_2),msg_b(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_b(sid_2),msg_b(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_b(sid_2),msg_b(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_b(sid_2),msg_b(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_1),msg_c(alice,bob,sid_1))) && begin(SendMsg(bob,alice,stagepack_b(sid_2),msg_b(bob,alice,sid_2))) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_c(sid_2),msg_c(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_1),msg_c(alice,bob,sid_1))) && begin(SendMsg(bob,alice,stagepack_b(sid_2),msg_b(bob,alice,sid_2))) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_c(sid_2),msg_c(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_1),msg_c(alice,bob,sid_1))) && begin(SendMsg(bob,alice,stagepack_b(sid_2),msg_b(bob,alice,sid_2))) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_c(sid_2),msg_c(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_1),msg_c(alice,bob,sid_1))) && begin(SendMsg(bob,alice,stagepack_b(sid_2),msg_b(bob,alice,sid_2))) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_c(sid_2),msg_c(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_1),msg_c(alice,bob,sid_1))) && begin(SendMsg(bob,alice,stagepack_b(sid_2),msg_b(bob,alice,sid_2))) && begin(SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1))) -> end(RecvMsg(bob,alice,stagepack_c(sid_2),msg_c(alice,bob,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_1),msg_d(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_c(sid_2),msg_c(alice,bob,sid_2))) && begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_d(sid_2),msg_d(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_1),msg_d(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_c(sid_2),msg_c(alice,bob,sid_2))) && begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_d(sid_2),msg_d(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_1),msg_d(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_c(sid_2),msg_c(alice,bob,sid_2))) && begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_d(sid_2),msg_d(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_1),msg_d(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_c(sid_2),msg_c(alice,bob,sid_2))) && begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_d(sid_2),msg_d(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_1),msg_d(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_c(sid_2),msg_c(alice,bob,sid_2))) && begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvMsg(alice,bob,stagepack_d(sid_2),msg_d(bob,alice,sid_1)))
Abbreviations:
sid_2 = sid[!1 = @sid]
sid_1 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_1),msg_d(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_c(sid_2),msg_c(alice,bob,sid_2))) && begin(SendMsg(bob,alice,stagepack_b(sid_1),msg_b(bob,alice,sid_1))) && begin(SendMsg(alice,bob,stagepack_a(sid_2),msg_a(alice,bob,sid_2))) -> end(RecvEnd(true))
Abbreviations:
sid_1 = sid[!1 = @sid]
sid_2 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_1 = sid[!1 = @sid]
sid_2 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1)) may be executed at {60}.
So the entry statestore(alice,bob,sid_1,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {61}.
table(statestore(alice,bob,sid_1,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_2,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {375}.
table(statestore(bob,alice,sid_2,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_1,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_1),msg_a(alice,bob,sid_1)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))).

5. The entry statestore(bob,alice,sid_2,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {423}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))) that may be sent on channel pub by 4 may be received at input {376}.
We have validkey(dhexp_real(key_e(alice,bob,sid_1),g)) ≠ caught-fail.
So the entry statestore(bob,alice,sid_2,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {422}.
table(statestore(bob,alice,sid_2,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_2,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {492}.
The event SendMsg(bob,alice,stagepack_b(sid_2),msg_b(bob,alice,sid_2)) may be executed at {489}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))) may be sent on channel pub at output {491}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2)))).

7. The entry statestore(alice,bob,sid_1,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {132}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))) that may be sent on channel pub by 6 may be received at input {64}.
So the entry statestore(alice,bob,sid_1,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {131}.
table(statestore(alice,bob,sid_1,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_1,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 7 may be read at get {152}.
The event SendMsg(alice,bob,stagepack_c(sid_1),msg_c(alice,bob,sid_1)) may be executed at {149}.
So the entry statestore(alice,bob,sid_1,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {150}.
table(statestore(alice,bob,sid_1,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_2,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {492}.
The event SendMsg(bob,alice,stagepack_b(sid_2),msg_b(bob,alice,sid_2)) may be executed at {489}.
So the entry statestore(bob,alice,sid_2,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_e(bob,alice,sid_2)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {490}.
table(statestore(bob,alice,sid_2,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_e(bob,alice,sid_2)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_1,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 7 may be read at get {152}.
The event SendMsg(alice,bob,stagepack_c(sid_1),msg_c(alice,bob,sid_1)) may be executed at {149}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1))) may be sent on channel pub at output {151}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1)))).

11. The entry statestore(bob,alice,sid_2,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_e(bob,alice,sid_2)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 9 may be read at get {513}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1))) that may be sent on channel pub by 10 may be received at input {495}.
So the entry statestore(bob,alice,sid_2,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_e(bob,alice,sid_2)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) may be inserted in a table at insert {512}.
table(statestore(bob,alice,sid_2,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_e(bob,alice,sid_2)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_2,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_e(bob,alice,sid_2)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 11 may be read at get {532}.
The event SendMsg(bob,alice,stagepack_d(sid_2),msg_d(bob,alice,sid_2)) may be executed at {530}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1))),msg_d(bob,alice,sid_2))) may be sent on channel pub at output {531}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1))),msg_d(bob,alice,sid_2)))).

13. The entry statestore(alice,bob,sid_1,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1),g)),key_e(alice,bob,sid_1)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_2),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce))) that may be in a table by 8 may be read at get {173}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_e(alice,bob,sid_1),dhexp_real(key_s(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_e(alice,bob,sid_1),g))),dhexp_real(key_e(bob,alice,sid_2),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1),g))),validkey(dhexp_real(key_s(alice),g)))),msg_a(alice,bob,sid_1))),validkey(dhexp_real(key_e(bob,alice,sid_2),g))),validkey(dhexp_real(key_s(bob),g)))),msg_b(bob,alice,sid_2))),msg_c(alice,bob,sid_1))),msg_d(bob,alice,sid_2))) that may be sent on channel pub by 12 may be received at input {155}.
So event RecvEnd(true) may be executed at {172}.
end(RecvEnd(true)).

14. By 13, end(RecvEnd(true)).
The goal is reached, represented in the following fact:
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------
Verification summary:

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.

Query not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.

Query not attacker_p1(msg_b(bob,alice,sid_b)) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.

Query not attacker_p1(msg_c(alice,bob,sid_a)) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.

Query not attacker_p1(msg_d(bob,alice,sid_b)) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)) is true.

Query not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------

